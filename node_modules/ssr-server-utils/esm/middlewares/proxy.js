import { createProxyMiddleware } from 'http-proxy-middleware';
import { getCwd } from '../cwd';
import { loadConfig } from '../loadConfig';
const koaConnect = require('koa2-connect');
function onProxyReq(proxyReq, req) {
    Object.keys(req.headers).forEach(function (key) {
        proxyReq.setHeader(key, req.headers[key]);
    });
}
const getDevProxyMiddlewaresArr = async (options) => {
    const { fePort, proxy, isDev, https } = loadConfig();
    const express = options ? options.express : false;
    const proxyMiddlewaresArr = [];
    function registerProxy(proxy) {
        for (const path in proxy) {
            const options = proxy[path];
            // 如果底层服务端框架是基于 express的。则不需要用 koaConnect 转换为 koa 中间件
            const middleware = express ? createProxyMiddleware(path, options) : koaConnect(createProxyMiddleware(path, options));
            proxyMiddlewaresArr.push(middleware);
        }
    }
    proxy && registerProxy(proxy);
    if (isDev) {
        if (process.env.BUILD_TOOL === 'vite') {
            // 本地开发请求走 vite 接管 前端文件夹请求
            const { createServer } = require('vite');
            const vite = await createServer({
                root: getCwd(),
                logLevel: 'info',
                server: {
                    middlewareMode: true
                }
            });
            proxyMiddlewaresArr.push(express ? vite.middlewares : koaConnect(vite.middlewares));
        }
        else {
            // Webpack 场景 在本地开发阶段代理 serverPort 的资源到 fePort
            // 例如 http://localhost:3000/static/js/page.chunk.js -> http://localhost:8888/static/js/page.chunk.js
            const remoteStaticServerOptions = {
                target: `${https ? 'https' : 'http'}://127.0.0.1:${fePort}`,
                changeOrigin: true,
                secure: false,
                onProxyReq,
                logLevel: 'warn'
            };
            const proxyPathMap = {
                '/static': remoteStaticServerOptions,
                '/sockjs-node': remoteStaticServerOptions,
                '/*.hot-update**': remoteStaticServerOptions,
                '/__webpack_dev_server__': remoteStaticServerOptions,
                '/asset-manifest': remoteStaticServerOptions
            };
            registerProxy(proxyPathMap);
        }
    }
    return proxyMiddlewaresArr;
};
export { getDevProxyMiddlewaresArr };
