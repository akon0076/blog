"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setStyle = void 0;
const loadConfig_1 = require("../loadConfig");
const setStyle = (chain, reg, options, isReact) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { css, isDev } = loadConfig_1.loadConfig();
    const { include, exclude, modules, importLoaders, loader } = options;
    const MiniCssExtractPlugin = require('mini-css-extract-plugin');
    const loadModule = require.resolve;
    const userCssloaderOptions = (_b = (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.cssOptions) !== null && _b !== void 0 ? _b : {};
    const cssloaderOptions = {
        importLoaders: importLoaders,
        modules: modules
    };
    if (isReact) {
        // @ts-expect-error
        cssloaderOptions.localIdentName = '[name]__[local]___[hash:base64:5]';
    }
    Object.assign(cssloaderOptions, userCssloaderOptions);
    const postCssPlugins = (_e = (_d = (_c = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _c === void 0 ? void 0 : _c.postcss) === null || _d === void 0 ? void 0 : _d.plugins) !== null && _e !== void 0 ? _e : []; // 用户自定义 postcss 插件
    const postCssOptions = Object.assign({
        ident: 'postcss',
        plugins: () => [
            require('postcss-flexbugs-fixes'),
            require('postcss-discard-comments'),
            require('postcss-preset-env')({
                autoprefixer: {
                    flexbox: 'no-2009'
                },
                stage: 3
            })
        ].concat(postCssPlugins)
    }, (_h = (_g = (_f = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _f === void 0 ? void 0 : _f.postcss) === null || _g === void 0 ? void 0 : _g.options) !== null && _h !== void 0 ? _h : {}); // 合并用户自定义 postcss options
    chain.module
        .rule(options.rule)
        .test(reg)
        .when(Boolean(include), rule => {
        include && rule.include.add(include).end();
    })
        .when(Boolean(exclude), rule => {
        exclude && rule.exclude.add(exclude).end();
    })
        .when(isDev, rule => {
        rule.use('hmr')
            .loader(loadModule('css-hot-loader'))
            .end();
    })
        .use('MiniCss')
        .loader(MiniCssExtractPlugin.loader)
        .end()
        .use('css-loader')
        .loader(loadModule('css-loader'))
        .options(cssloaderOptions)
        .end()
        .use('postcss-loader')
        .loader(loadModule('postcss-loader'))
        .options(postCssOptions)
        .end()
        .when(Boolean(loader), rule => {
        loader && rule.use(loader)
            .loader(loadModule(loader))
            .when(loader === 'less-loader', rule => {
            var _a, _b;
            rule.options((_b = (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.less) !== null && _b !== void 0 ? _b : {
                lessOptions: {
                    javascriptEnabled: true
                }
            });
        })
            .when(loader === 'sass-loader', rule => {
            var _a, _b;
            rule.options((_b = (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.sass) !== null && _b !== void 0 ? _b : {});
        })
            .end();
    });
};
exports.setStyle = setStyle;
