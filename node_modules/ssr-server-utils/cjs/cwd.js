"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execPromisify = exports.checkVite = exports.copyViteConfig = exports.accessFile = exports.processError = exports.getLocalNodeModules = exports.loadPlugin = exports.isFaaS = exports.getUserConfig = exports.getPagesDir = exports.getFeDir = exports.getCwd = void 0;
const fs = require("fs");
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
const util_1 = require("util");
const getCwd = () => {
    var _a;
    return path_1.resolve(process.cwd(), (_a = process.env.APP_ROOT) !== null && _a !== void 0 ? _a : '');
};
exports.getCwd = getCwd;
const getFeDir = () => {
    var _a;
    return path_1.resolve(getCwd(), (_a = process.env.FE_ROOT) !== null && _a !== void 0 ? _a : 'web');
};
exports.getFeDir = getFeDir;
const getPagesDir = () => {
    return path_1.resolve(getFeDir(), 'pages');
};
exports.getPagesDir = getPagesDir;
const getUserConfig = () => {
    // 生产环境如果有 config.prod 则读取
    const isProd = process.env.NODE_ENV === 'production';
    const hasProdConfig = fs.existsSync(path_1.resolve(getCwd(), 'config.prod.js'));
    return require(path_1.resolve(getCwd(), isProd && hasProdConfig ? 'config.prod' : 'config'));
};
exports.getUserConfig = getUserConfig;
const loadPlugin = () => {
    return require(path_1.resolve(getCwd(), 'plugin'));
};
exports.loadPlugin = loadPlugin;
const isFaaS = async (fun) => {
    const result = await fs_1.promises.access(path_1.resolve(getCwd(), fun ? 'template.yml' : 'f.yml'))
        .then(() => true)
        .catch(() => false);
    return result;
};
exports.isFaaS = isFaaS;
const getLocalNodeModules = () => path_1.resolve(__dirname, '../../../node_modules');
exports.getLocalNodeModules = getLocalNodeModules;
const processError = (err) => {
    if (err) {
        console.log(err);
        process.exit(1);
    }
};
exports.processError = processError;
const accessFile = async (file) => {
    const result = await fs_1.promises.access(file)
        .then(() => true)
        .catch(() => false);
    return result;
};
exports.accessFile = accessFile;
const checkVite = async () => {
    const result = await accessFile(path_1.resolve(getCwd(), './node_modules/vite/package.json'));
    if (!result) {
        const version = require(path_1.resolve(getCwd(), './package.json')).dependencies.vue;
        let plugin = '';
        if (version) {
            plugin = /^.?3/.test(version) ? '@vitejs/plugin-vue' : 'vite-plugin-vue2';
        }
        else {
            plugin = '@vitejs/plugin-react-refresh';
        }
        console.log(`当前项目缺少 vite 依赖，请根据实际技术栈安装 vite ${plugin} 或 其他对应插件`);
        return false;
    }
    return true;
};
exports.checkVite = checkVite;
const copyViteConfig = async () => {
    // 如果当前项目没有 vite.config 则复制默认的文件
    const result = await accessFile(path_1.resolve(getCwd(), './vite.config.js'));
    if (!result) {
        const version = require(path_1.resolve(getCwd(), './package.json')).dependencies.vue;
        console.log('vite.config.js is not found, will be created automatically');
        let folder = '';
        if (version) {
            folder = /^.?3/.test(version) ? 'ssr-plugin-vue3' : 'ssr-plugin-vue';
        }
        else {
            folder = 'ssr-plugin-react';
        }
        await fs_1.promises.copyFile(path_1.resolve(getCwd(), `./node_modules/${folder}/src/config/vite.config.tpl`), path_1.resolve(getCwd(), './vite.config.js'));
    }
};
exports.copyViteConfig = copyViteConfig;
const execPromisify = util_1.promisify(child_process_1.exec);
exports.execPromisify = execPromisify;
