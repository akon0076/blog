"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
const path_1 = require("path");
const cwd_1 = require("./cwd");
const loadConfig = () => {
    var _a, _b;
    const userConfig = cwd_1.getUserConfig();
    const cwd = cwd_1.getCwd();
    const mode = 'ssr';
    const stream = false;
    const publicPath = '/';
    const moduleFileExtensions = [
        '.web.mjs',
        '.mjs',
        '.web.js',
        '.js',
        '.web.ts',
        '.ts',
        '.web.tsx',
        '.tsx',
        '.json',
        '.web.jsx',
        '.jsx',
        '.vue',
        '.css'
    ];
    const isDev = process.env.NODE_ENV !== 'production';
    const fePort = (_a = userConfig.fePort) !== null && _a !== void 0 ? _a : 8888;
    let https = userConfig.https ? userConfig.https : !!process.env.HTTPS;
    if (!((typeof https === 'boolean' && https) || (typeof https === 'object' && Object.keys(https).length !== 0))) {
        https = false;
    }
    const serverPort = (_b = process.env.SERVER_PORT) !== null && _b !== void 0 ? _b : 3000;
    const host = '0.0.0.0';
    const chunkName = 'Page';
    const clientLogLevel = 'error';
    const useHash = !isDev; // 生产环境默认生成hash
    const whiteList = [];
    const jsOrder = [`runtime~${chunkName}.js`, 'vendor.js', `${chunkName}.js`];
    const cssOrder = [`${chunkName}.css`];
    const webpackStatsOption = {
        assets: true,
        cachedAssets: false,
        children: false,
        chunks: false,
        colors: true,
        modules: false,
        warnings: false,
        entrypoints: false
    };
    const dynamic = !process.env.SPA; // SPA 部署模式下不开启 dynamic
    const corejs = false;
    const getOutput = () => ({
        clientOutPut: path_1.join(cwd, './build/client'),
        serverOutPut: path_1.join(cwd, './build/server')
    });
    const cssModulesWhiteList = [/antd/, /swiper/];
    const webpackDevServerConfig = Object.assign({
        stats: webpackStatsOption,
        disableInfo: true,
        disableHostCheck: true,
        publicPath: publicPath,
        hotOnly: true,
        host,
        sockPort: fePort,
        hot: true,
        port: fePort,
        https,
        clientLogLevel: clientLogLevel,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
            'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization'
        }
    }, userConfig.webpackDevServerConfig);
    const chainBaseConfig = () => {
        // 覆盖默认webpack配置
    };
    const chainClientConfig = () => {
        // 覆盖默认 client webpack配置
    };
    const chainServerConfig = () => {
        // 覆盖默认 server webpack配置
    };
    const config = Object.assign({}, {
        chainBaseConfig,
        chainServerConfig,
        chainClientConfig,
        cwd,
        isDev,
        publicPath,
        useHash,
        host,
        moduleFileExtensions,
        fePort,
        serverPort,
        chunkName,
        jsOrder,
        cssOrder,
        getOutput,
        webpackStatsOption,
        whiteList,
        cssModulesWhiteList,
        dynamic,
        mode,
        stream,
        corejs,
        https
    }, userConfig);
    config.webpackDevServerConfig = webpackDevServerConfig; // 防止把整个 webpackDevServerConfig 全量覆盖了
    return config;
};
exports.loadConfig = loadConfig;
