"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFeRoutes = exports.normalizePath = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const Shell = require("shelljs");
const cwd_1 = require("./cwd");
const loadConfig_1 = require("./loadConfig");
const debug = require('debug')('ssr:parse');
const { dynamic } = loadConfig_1.loadConfig();
const pageDir = cwd_1.getPagesDir();
const cwd = cwd_1.getCwd();
let { prefix } = loadConfig_1.loadConfig();
if (prefix && !prefix.startsWith('/')) {
    prefix = `/${prefix}`;
}
exports.normalizePath = (path) => {
    path = path.replace(prefix, '');
    if (path.startsWith('//')) {
        path = path.replace('//', '/');
    }
    if (!path.startsWith('/')) {
        path = `/${path}`;
    }
    return path;
};
const parseFeRoutes = async () => {
    const isVue = require(path_1.join(cwd, './package.json')).dependencies.vue;
    const viteMode = process.env.BUILD_TOOL === 'vite';
    if (viteMode && !dynamic) {
        console.log('vite模式禁止关闭 dynamic ');
        return;
    }
    if (!await cwd_1.accessFile(path_1.join(cwd, './node_modules/ssr-temporary-routes'))) {
        Shell.mkdir(path_1.join(cwd, './node_modules/ssr-temporary-routes'));
    }
    let routes = '';
    const declaretiveRoutes = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './route.ts')); // 是否存在自定义路由
    if (!declaretiveRoutes) {
        // 根据目录结构生成前端路由表
        const pathRecord = ['']; // 路径记录
        const route = {};
        const arr = await renderRoutes(pageDir, pathRecord, route);
        debug('Before the result that parse web folder to routes is: ', arr);
        if (isVue) {
            const layoutPath = '@/components/layout/index.vue';
            const accessVueApp = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './components/layout/App.vue'));
            const layoutFetch = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './components/layout/fetch.ts'));
            const store = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './store/index.ts'));
            const AppPath = `@/components/layout/App.${accessVueApp ? 'vue' : 'tsx'}`;
            const re = /"webpackChunkName":("(.+?)")/g;
            routes = `
        ${store ? 'import * as store from "@/store/index.ts"' : ''}
        export const FeRoutes = ${JSON.stringify(arr)} 
        export { default as Layout } from "${layoutPath}"
        export { default as App } from "${AppPath}"
        ${layoutFetch ? 'export { default as layoutFetch } from "@/components/layout/fetch.ts"' : ''}
        ${store ? 'export { store }' : ''}
        ${prefix ? `export const BASE_NAME='${prefix}'` : ''}
        `;
            routes = routes.replace(/"component":("(.+?)")/g, (global, m1, m2) => {
                const currentWebpackChunkName = re.exec(routes)[2];
                if (dynamic) {
                    return `"component":  __isBrowser__ ? () => import(/* webpackChunkName: "${currentWebpackChunkName}" */ '${m2.replace(/\^/g, '"')}') : require('${m2.replace(/\^/g, '"')}').default`;
                }
                else {
                    return `"component":  require('${m2.replace(/\^/g, '"')}').default`;
                }
            });
            re.lastIndex = 0;
            routes = routes.replace(/"fetch":("(.+?)")/g, (global, m1, m2) => {
                const currentWebpackChunkName = re.exec(routes)[2];
                return `"fetch": __isBrowser__ ? () => import(/* webpackChunkName: "${currentWebpackChunkName}-fetch" */ '${m2.replace(/\^/g, '"')}') : require('${m2.replace(/\^/g, '"')}').default`;
            });
        }
        else {
            // React 场景
            const accessReactApp = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './components/layout/App.tsx'));
            const layoutFetch = await cwd_1.accessFile(path_1.join(cwd_1.getFeDir(), './components/layout/fetch.ts'));
            const re = /"webpackChunkName":("(.+?)")/g;
            routes = `
        ${dynamic && !viteMode ? `
        import React from "react"
        import loadable from 'react-loadable' ` : ''}
        export const FeRoutes = ${JSON.stringify(arr)} 
        ${accessReactApp ? 'export { default as App } from "@/components/layout/App.tsx"' : ''}
        ${layoutFetch ? 'export { default as layoutFetch } from "@/components/layout/fetch.ts"' : ''}
        ${prefix ? `export const BASE_NAME='${prefix}'` : ''}

        `;
            routes = routes.replace(/"component":("(.+?)")/g, (global, m1, m2) => {
                const currentWebpackChunkName = re.exec(routes)[2];
                if (dynamic) {
                    if (viteMode) {
                        return `"component":  __isBrowser__ ? () => import(/* webpackChunkName: "${currentWebpackChunkName}" */ '${m2.replace(/\^/g, '"')}') : require('${m2.replace(/\^/g, '"')}').default`;
                    }
                    else {
                        return `"component":  __isBrowser__ ? loadable({
                  loader: () => import(/* webpackChunkName: "${currentWebpackChunkName}" */ '${m2.replace(/\^/g, '"')}'),
                  loading: function Loading () {
                    return React.createElement('div')
                  }
                }) : require('${m2.replace(/\^/g, '"')}').default`;
                    }
                }
                else {
                    return `"component":  require('${m2.replace(/\^/g, '"')}').default`;
                }
            });
            re.lastIndex = 0;
            routes = routes.replace(/"fetch":("(.+?)")/g, (global, m1, m2) => {
                const currentWebpackChunkName = re.exec(routes)[2];
                return `"fetch": __isBrowser__ ? () => import(/* webpackChunkName: "${currentWebpackChunkName}-fetch" */ '${m2.replace(/\^/g, '"')}') : require('${m2.replace(/\^/g, '"')}').default`;
            });
        }
    }
    else {
        // 使用了声明式路由
        routes = (await fs_1.promises.readFile(path_1.join(cwd_1.getFeDir(), './route.ts'))).toString();
    }
    debug('After the result that parse web folder to routes is: ', routes);
    await fs_1.promises.writeFile(path_1.resolve(cwd, './node_modules/ssr-temporary-routes/route.js'), routes);
    await fs_1.promises.copyFile(path_1.resolve(__dirname, '../src/packagejson.tpl'), path_1.resolve(cwd, './node_modules/ssr-temporary-routes/package.json'));
    await renderTmpFile(viteMode);
};
exports.parseFeRoutes = parseFeRoutes;
const renderRoutes = async (pageDir, pathRecord, route) => {
    let arr = [];
    const pagesFolders = await fs_1.promises.readdir(pageDir);
    const prefixPath = pathRecord.join('/');
    const aliasPath = `@/pages${prefixPath}`;
    const routeArr = [];
    const fetchExactMatch = pagesFolders.filter(p => p.includes('fetch'));
    for (const pageFiles of pagesFolders) {
        const abFolder = path_1.join(pageDir, pageFiles);
        const isDirectory = (await fs_1.promises.stat(abFolder)).isDirectory();
        if (isDirectory) {
            // 如果是文件夹则递归下去, 记录路径
            pathRecord.push(pageFiles);
            const childArr = await renderRoutes(abFolder, pathRecord, Object.assign({}, route));
            pathRecord.pop(); // 回溯
            arr = arr.concat(childArr);
        }
        else {
            // 拿到具体的文件
            if (pageFiles.includes('render')) {
                /* /news */
                route.path = `${prefixPath}`;
                route.component = `${aliasPath}/${pageFiles}`;
                let webpackChunkName = pathRecord.join('-');
                if (webpackChunkName.startsWith('-')) {
                    webpackChunkName = webpackChunkName.replace('-', '');
                }
                route.webpackChunkName = webpackChunkName;
            }
            if (pageFiles.includes('render$')) {
                /* /news/:id */
                route.path = `${prefixPath}/:${getDynamicParam(pageFiles)}`;
                route.component = `${aliasPath}/${pageFiles}`;
                // fetch文件数量>=2 启用完全匹配策略
                if (fetchExactMatch.length >= 2) {
                    const fetchPageFiles = `fetch${pageFiles.replace('render', '').replace('.vue', '.ts')}`;
                    if (fetchExactMatch.includes(fetchPageFiles)) {
                        route.fetch = `${aliasPath}/${fetchPageFiles}`;
                    }
                }
                let webpackChunkName = pathRecord.join('-');
                if (webpackChunkName.startsWith('-')) {
                    webpackChunkName = webpackChunkName.replace('-', '');
                }
                route.webpackChunkName = `${webpackChunkName}-${getDynamicParam(pageFiles)}`;
            }
            if (pageFiles.includes('fetch')) {
                route.fetch = `${aliasPath}/${pageFiles}`;
            }
            routeArr.push({ ...route });
        }
    }
    routeArr.forEach((r) => {
        var _a;
        if ((_a = r.path) === null || _a === void 0 ? void 0 : _a.includes('index')) {
            // /index 映射为 /
            if (r.path.split('/').length >= 3) {
                r.path = r.path.replace('/index', '');
            }
            else {
                r.path = r.path.replace('index', '');
            }
        }
        r.path && arr.push(r);
    });
    return arr;
};
const getDynamicParam = (url) => {
    return url.split('$').filter(r => r !== 'render' && r !== '').map(r => r.replace(/\.[\s\S]+/, '')).join('/:');
};
const renderTmpFile = async (viteMode) => {
    if (process.env.TEST && viteMode) {
        // 开发同学本地开发时 vite 场景将路由表写一份到 repo 下面而不是 example 下面，否则 client-entry 会找不到该文件
        Shell.rm('-rf', path_1.resolve(__dirname, '../../../node_modules/ssr-temporary-routes/'));
        Shell.cp('-r', path_1.resolve(cwd, './node_modules/ssr-temporary-routes/'), path_1.resolve(__dirname, '../../../node_modules/ssr-temporary-routes/'));
    }
};
