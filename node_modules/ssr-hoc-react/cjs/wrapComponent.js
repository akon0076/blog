"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapComponent = void 0;
const React = require("react");
const react_1 = require("react");
const react_router_dom_1 = require("react-router-dom");
let routerChanged = false;
const fetch = async (WrappedComponent, dispatch, props) => {
    let asyncLayoutData = {};
    let asyncData = {};
    if (WrappedComponent.layoutFetch) {
        asyncLayoutData = await WrappedComponent.layoutFetch(props);
    }
    if (WrappedComponent.fetch) {
        const fetchFn = await WrappedComponent.fetch();
        asyncData = await fetchFn.default(props);
    }
    const combineData = Object.assign({}, asyncLayoutData, asyncData);
    await dispatch({
        type: 'updateContext',
        payload: combineData
    });
};
function wrapComponent(WrappedComponent) {
    return react_router_dom_1.withRouter(props => {
        const { dispatch } = react_1.useContext(window.STORE_CONTEXT);
        react_1.useEffect(() => {
            didMount();
        }, []);
        const didMount = async () => {
            if (routerChanged || !window.__USE_SSR__) {
                // ssr 情况下只有路由切换的时候才需要调用 fetch
                // csr 情况首次访问页面也需要调用 fetch
                await fetch(WrappedComponent, dispatch, props);
            }
            if (!routerChanged) {
                // routerChanged 为 true 代表已经进行过切换路由的操作
                routerChanged = true;
            }
        };
        return React.createElement(WrappedComponent, Object.assign({}, props));
    });
}
exports.wrapComponent = wrapComponent;
