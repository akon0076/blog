"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsYaml = __importStar(require("js-yaml"));
const Yaml = __importStar(require("yaml-ast-parser"));
const colors_1 = require("colors");
const parser_1 = require("../language-service/parser/parser");
const jsonSchemaService_1 = require("../language-service/services/jsonSchemaService");
const jsonParser_1 = require("../language-service/parser/jsonParser");
const tpl_1 = require("../utils/tpl");
function validate(...tplPaths) {
    return __awaiter(this, void 0, void 0, function* () {
        // work around: https://github.com/alibaba/funcraft/issues/676
        if (process.env.IGNORE_TPL_VALIDATION
            && process.env.IGNORE_TPL_VALIDATION !== '0'
            && process.env.IGNORE_TPL_VALIDATION !== 'false') {
            return;
        }
        const tpl = tpl_1.mergeTpl(...tplPaths);
        const docRoot = parser_1.buildAstRecursively(undefined, Yaml.load(jsYaml.safeDump(tpl, { noRefs: true })));
        const jsonSchemaService = jsonSchemaService_1.JSONSchemaService.getJSONSchemaService();
        const resolvedSchema = yield jsonSchemaService.getSchemaForResource();
        const validationResult = new jsonParser_1.ValidationResult();
        const matchingSchemas = new jsonParser_1.SchemaCollector();
        docRoot.validate(resolvedSchema.schema, validationResult, matchingSchemas);
        let errCnt = 0;
        validationResult.problems.forEach(problem => {
            if (problem.severity === jsonParser_1.ProblemSeverity.Error) {
                errCnt++;
            }
            console.log(`${colors_1.bgBlack(colors_1.white('fun'))} ` +
                ((problem.severity === jsonParser_1.ProblemSeverity.Error) ? `${colors_1.bgBlack(colors_1.red('ERR!'))} ` : `${colors_1.bgBlack(colors_1.yellow('WRAN'))} `) +
                `${colors_1.magenta(jsonParser_1.ErrorCodeTable[problem.code])} ` +
                `${problem.path.join('/')}: ${problem.message}`);
        });
        if (errCnt) {
            throw new Error(`${colors_1.bgBlack(colors_1.white('fun'))} ${colors_1.bgBlack(colors_1.red('ERR!'))} template is not valid`);
        }
    });
}
module.exports = validate;
