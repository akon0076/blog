'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const yaml = require('js-yaml');
const debug = require('debug')('fun:conf');
const getProfile = require('./profile').getProfile;
function getConf(rootDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const profile = yield getProfile();
        var confPath = path.join(rootDir, 'faas.yml');
        var isexists = yield fs.pathExists(confPath);
        if (!isexists) {
            // try faas.yaml
            confPath = path.join(rootDir, 'faas.yaml');
            isexists = yield fs.pathExists(confPath);
        }
        if (!isexists) {
            throw new Error('Current folder not a Faas project\nThe folder must contains faas.yml or faas.yaml');
        }
        const confContent = yield fs.readFile(confPath, 'utf8');
        const conf = yaml.safeLoad(confContent);
        if (!conf.accountid) {
            debug('try to get accountId from profile');
            conf.accountid = profile.accountId;
        }
        if (!conf.accessKeyId) {
            debug('try to get accessKeyId from profile');
            conf.accessKeyId = profile.accessKeyId;
        }
        if (!conf.accessKeySecret) {
            debug('try to get accessKeySecret from profile');
            conf.accessKeySecret = profile.accessKeySecret;
        }
        if (!conf.securityToken) {
            debug('try to get securityToken from profile');
            conf.securityToken = profile.securityToken;
        }
        debug('exitst config: %j', conf);
        return conf;
    });
}
module.exports = getConf;
