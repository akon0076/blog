'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const { green } = require('colors');
const { getFnFClient } = require('../client');
const { parsingFlowResource } = require('./fnf-parser');
const { getTemplateFile, outputTemplateFile, getTemplateHeader } = require('./utils');
const _ = require('lodash');
function getFlowResource(fnfName) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield getFnFClient();
        return yield client.describeFlow({
            'Name': fnfName
        });
    });
}
function getDefaultTemplate(absOutputDir) {
    const templateFile = getTemplateFile(absOutputDir);
    const templateFilePath = path.resolve(absOutputDir, 'template.yml');
    if (templateFile) {
        return {
            content: templateFile.content,
            templateFilePath
        };
    }
    return {
        content: getTemplateHeader(),
        templateFilePath
    };
}
function resolveOutputDir(cwd, outputDir) {
    if (!path.isAbsolute(outputDir)) {
        if (!cwd || cwd === '.') {
            cwd = process.cwd();
        }
        cwd = path.resolve(cwd);
        return path.resolve(cwd, outputDir);
    }
    return outputDir;
}
// not support overwrite
function importFlowResource({ fnfName, outputDir = '.', definitionYmlPrefix, skipIfExists = false }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!fnfName) {
            console.log('fnfName is missing.');
            return;
        }
        console.log('\nImport flow resources...');
        const rs = yield getFlowResource(fnfName);
        const absOutputDir = resolveOutputDir(null, outputDir);
        const { content, templateFilePath } = getDefaultTemplate(absOutputDir);
        if (!_.isEmpty(content.Resources[fnfName])) {
            if (skipIfExists) {
                console.log(`Flow ${fnfName} is already exist, skip.`);
                return;
            }
            throw new Error(`Flow ${fnfName} is already exist.`);
        }
        const definitionYmlPath = path.join(absOutputDir, `${definitionYmlPrefix ? definitionYmlPrefix : fnfName}.flow.yml`);
        content.Resources[fnfName] = parsingFlowResource(rs, definitionYmlPath, outputDir);
        outputTemplateFile(templateFilePath, content);
        console.log(`${green('âœ”')} flow import finished`);
    });
}
module.exports = importFlowResource;
