'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { getFcClient } = require('../client');
const { getTemplateFile, checkResource, outputTemplateFile, getTemplateHeader } = require('./utils');
const { parseCustomDomainResource } = require('./custom-domain-parser');
const path = require('path');
const debug = require('debug')('fun:import:custom-domain');
const { green, grey, yellow } = require('colors');
function getCustomDomainMeta(domainName) {
    return __awaiter(this, void 0, void 0, function* () {
        const fc = yield getFcClient();
        const { data } = yield fc.getCustomDomain(domainName);
        return data;
    });
}
function listCustomDomainMetas() {
    return __awaiter(this, void 0, void 0, function* () {
        const fc = yield getFcClient();
        const { data } = yield fc.listCustomDomains();
        return data.customDomains;
    });
}
function checkCustomDomain(customDomainMetas, content, skipIfExists) {
    for (const customDomainMeta of customDomainMetas) {
        try {
            checkResource(customDomainMeta.customDomain, content);
            customDomainMeta.exists = false;
        }
        catch (error) {
            if (!skipIfExists) {
                throw error;
            }
            customDomainMeta.exists = true;
        }
    }
}
function importCustomDomain(domainName, outputDir = '.', skipIfExists = true) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('\nImport custom domain resources: ');
        let customDomainMetas = [];
        if (domainName) {
            const customDomainMeta = yield getCustomDomainMeta(domainName);
            customDomainMetas.push(customDomainMeta);
        }
        else {
            customDomainMetas = yield listCustomDomainMetas(domainName);
        }
        if (customDomainMetas.length === 0) {
            console.log(yellow('No custom domain name resources found.\n'));
            return;
        }
        const fullOutputDir = path.resolve(process.cwd(), outputDir);
        debug('Output Dir: %s', fullOutputDir);
        const templateFile = getTemplateFile(fullOutputDir);
        debug('Custom domain metadata: %s', customDomainMetas);
        let content;
        let templateFilePath;
        if (templateFile) {
            content = templateFile.content;
            templateFilePath = templateFile.templateFilePath;
        }
        else {
            content = getTemplateHeader();
            templateFilePath = path.resolve(fullOutputDir, 'template.yml');
        }
        checkCustomDomain(customDomainMetas, content, skipIfExists);
        for (const customDomainMeta of customDomainMetas) {
            const customDomain = customDomainMeta.customDomain;
            if (customDomainMeta.exists) {
                console.log(`${yellow('skip')} ${customDomain} - ${grey('Custom Domain')}`);
            }
            else {
                content.Resources[customDomain] = parseCustomDomainResource(customDomainMeta);
                console.log(`${green('âœ”')} ${customDomain} - ${grey('Custom Domain')}`);
            }
        }
        outputTemplateFile(templateFilePath, content);
        console.log('Custom domain import finished\n');
    });
}
module.exports = {
    importCustomDomain
};
