'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { determineRepoDir, getOfficialTemplates } = require('../init/repository');
const { render } = require('../init/renderer');
const { sync } = require('rimraf');
const { buildContext } = require('../init/context');
const { promptForTemplate } = require('../init/prompt');
const debug = require('debug')('fun:init');
function cleanTemplate(repoDir) {
    debug('Cleaning Template: %', repoDir);
    sync(repoDir);
}
function init(context) {
    return __awaiter(this, void 0, void 0, function* () {
        debug('location is: %s', context.location);
        context.templates = getOfficialTemplates();
        if (!context.location) {
            context.location = yield promptForTemplate(Object.keys(context.templates));
        }
        const { repoDir, clean } = yield determineRepoDir(context);
        try {
            yield buildContext(repoDir, context);
            render(context);
        }
        finally {
            if (clean) {
                cleanTemplate(repoDir);
            }
        }
    });
}
module.exports = init;
