'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const debug = require('debug')('fun:deploy');
const { yellow, red, green } = require('colors');
const { ensureFilesModified } = require('../utils/file');
const { detectTplPath, validateTplName } = require('../tpl');
const { promptForConfirmContinue, promptForInputContinue } = require('../init/prompt');
const { detectFramework, generateTemplateContent, execFrameworkActions } = require('../frameworks/framework');
function deploy(context) {
    return __awaiter(this, void 0, void 0, function* () {
        let tplPath = context.template;
        if (!tplPath) {
            tplPath = yield detectTplPath(true, ['template.packaged.yml']);
        }
        if (!tplPath) {
            console.warn(red('current folder is not a fun project.'));
            if (!context.assumeYes
                && !(yield promptForConfirmContinue('Let Fun create one for you'))) {
                return;
            }
            const baseDir = process.cwd();
            const codeDir = baseDir;
            const framework = yield detectFramework(codeDir);
            if (framework) {
                debug('detected framework', framework);
                let name = path.basename(codeDir);
                if (!context.assumeYes) {
                    name = (yield promptForInputContinue(`Whatâ€™s your service and function name?`, name)).input;
                }
                yield execFrameworkActions(codeDir, baseDir, framework);
                tplPath = path.join(codeDir, 'template.yml');
                console.log(green('Generating template.yml...'));
                const templateYmlContent = yield generateTemplateContent(name, framework);
                yield fs.writeFile(tplPath, templateYmlContent);
                console.log(green('Generate Fun project successfully!'));
                console.log(yellow('\n\n========= Fun will use \'fun deploy\' to deploy your application to Function Compute! ========='));
            }
            else {
                throw new Error(red('could not detect your project framework, please contact us on https://github.com/alibaba/funcraft/issues'));
            }
        }
        validateTplName(tplPath);
        yield ensureFilesModified(tplPath);
        yield require('../deploy/deploy-by-tpl').deploy(tplPath, context);
    });
}
module.exports = deploy;
