'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const validate = require('../validate/validate');
const { red } = require('colors');
const { buildFunction } = require('../build/build');
const { showBuildNextTips } = require('../build/tips');
const { detectTplPath, getTpl, validateTplName } = require('../tpl');
function build(buildName, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let tplPath = options.template;
        if (!tplPath) {
            tplPath = yield detectTplPath(false);
        }
        const useDocker = options.useDocker;
        const useBuildkit = options.useBuildkit;
        const assumeYes = options.assumeYes;
        if (!tplPath) {
            throw new Error(red('Current folder not a fun project\nThe folder must contains template.[yml|yaml] or faas.[yml|yaml] .'));
        }
        validateTplName(tplPath);
        yield validate(tplPath);
        const tpl = yield getTpl(tplPath);
        const baseDir = path.dirname(tplPath);
        yield buildFunction(buildName, tpl, baseDir, useDocker, useBuildkit, ['install', 'build'], options.verbose, tplPath, assumeYes);
        showBuildNextTips();
    });
}
module.exports = build;
