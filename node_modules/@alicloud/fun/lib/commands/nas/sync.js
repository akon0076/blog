'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const nasCp = require('../../nas/cp');
const nas = require('../../nas');
const path = require('path');
const validate = require('../../validate/validate');
const tips = require('../../nas/tips');
const { red } = require('colors');
const { toBeUmountedDirs, mergeNasMappingsInNasYml } = require('../../nas/support');
const { detectTplPath, getTpl, validateTplName, detectNasBaseDir, getBaseDir, getNasYmlPath } = require('../../tpl');
const _ = require('lodash');
function sync(options) {
    return __awaiter(this, void 0, void 0, function* () {
        let tplPath = options.template;
        if (!tplPath) {
            tplPath = yield detectTplPath(false);
        }
        if (!tplPath) {
            throw new Error(red('Current folder not a fun project\nThe folder must contains template.[yml|yaml] or faas.[yml|yaml] .'));
        }
        validateTplName(tplPath);
        yield validate(tplPath);
        const tpl = yield getTpl(tplPath);
        const baseDir = getBaseDir(tplPath);
        var service = options.service;
        var mountedDirs = options.mountDir;
        const nasBaseDir = detectNasBaseDir(tplPath);
        const nasMappingsIntpl = yield nas.convertTplToServiceNasMappings(nasBaseDir, tpl);
        const serviceNasMappings = yield mergeNasMappingsInNasYml(getNasYmlPath(tplPath), nasMappingsIntpl);
        if (service && mountedDirs) {
            const nasMappings = serviceNasMappings[service];
            const configuredMountDirs = _.map(nasMappings, (mapping) => mapping.remoteNasDir);
            const toUnmountDirs = toBeUmountedDirs(configuredMountDirs, mountedDirs);
            if (!_.isEmpty(toUnmountDirs)) {
                console.log(red(`Warning: ${toUnmountDirs} are not configured by service: ${service}`));
            }
        }
        const localNasTmpDir = path.join(baseDir, '.fun', 'tmp', 'nas', 'sync');
        var errors = [];
        for (const serviceName in serviceNasMappings) {
            if (service && serviceName !== service) {
                continue;
            }
            for (const { localNasDir, remoteNasDir } of serviceNasMappings[serviceName]) {
                if (mountedDirs && !mountedDirs.includes(remoteNasDir)) {
                    continue;
                }
                if (!localNasDir || !remoteNasDir) {
                    continue;
                }
                const srcPath = localNasDir;
                const dstPath = `nas://${serviceName}${remoteNasDir}/`;
                console.log(`starting upload ${srcPath} to ${dstPath}`);
                try {
                    yield nasCp(srcPath, dstPath, true, false, localNasTmpDir, tpl, tplPath, baseDir, true);
                }
                catch (error) {
                    errors.push(`Upload ${srcPath} To ${dstPath} ${error}`);
                }
            }
        }
        if (errors.length) {
            console.log();
            _.forEach(errors, (error) => {
                console.log(red(`${error}\n`));
            });
        }
        tips.showInitNextTips();
    });
}
module.exports = sync;
