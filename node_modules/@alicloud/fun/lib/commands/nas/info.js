'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const nas = require('../../nas');
const validate = require('../../validate/validate');
const { red } = require('colors');
const { getNasMappingsFromNasYml } = require('../../nas/support');
const { detectTplPath, getTpl, validateTplName, detectNasBaseDir, getNasYmlPath } = require('../../tpl');
const _ = require('lodash');
function mergeNasMappings(fromTpl, fromNasYml) {
    return _.mapValues(fromTpl, (nasMappings, serviceName) => {
        if (_.isEmpty(fromNasYml[serviceName])) {
            return nasMappings;
        }
        return _.unionWith([...fromNasYml[serviceName], ...nasMappings], _.isEqual);
    });
}
function info(tplPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tplPath) {
            tplPath = yield detectTplPath(false);
        }
        if (!tplPath) {
            throw new Error(red('Current folder not a fun project\nThe folder must contains template.[yml|yaml] or faas.[yml|yaml] .'));
        }
        validateTplName(tplPath);
        yield validate(tplPath);
        const tpl = yield getTpl(tplPath);
        const nasBaseDir = detectNasBaseDir(tplPath);
        const nasMappingsFromTpl = yield nas.convertTplToServiceNasMappings(nasBaseDir, tpl);
        const nasMappingsFromNasYml = yield getNasMappingsFromNasYml(getNasYmlPath(tplPath));
        const serviceNasMappings = mergeNasMappings(nasMappingsFromTpl, nasMappingsFromNasYml);
        _.forEach(serviceNasMappings, (nasMappings, serviceName) => {
            console.log();
            console.log('Local NAS folder of service ' + serviceName + ' includes:');
            if (_.isEmpty(nasMappings)) {
                console.log('None');
            }
            else {
                for (let { localNasDir } of nasMappings) {
                    console.log(localNasDir);
                }
            }
        });
    });
}
module.exports = info;
