'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const osLocale = require('os-locale');
const MNSClient = require('@alicloud/mns');
const hashedMachineId = require('node-machine-id').machineId;
const pkg = require('../package.json');
const CloudAPI = require('@alicloud/cloudapi');
const TableStore = require('tablestore');
const Log = require('@alicloud/log');
const FC = require('@alicloud/fc2');
const FnFClient = require('@alicloud/fnf-2019-03-15');
const Pop = require('@alicloud/pop-core');
const getProfile = require('./profile').getProfile;
const OSS = require('ali-oss');
const debug = require('debug');
const { throwProcessedFCPermissionError, throwProcessedPopPermissionError, throwProcessedSLSPermissionError } = require('./error-message');
const getRosClient = () => __awaiter(this, void 0, void 0, function* () {
    return yield getPopClient('http://ros.aliyuncs.com', '2019-09-10');
});
const getOssClient = (bucket) => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    if (!bucket) {
        return OSS({
            region: 'oss-' + profile.defaultRegion,
            accessKeyId: profile.accessKeyId,
            accessKeySecret: profile.accessKeySecret,
            stsToken: profile.securityToken,
            timeout: profile.timeout * 1000
        });
    }
    const location = yield OSS({
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        stsToken: profile.securityToken,
        bucket,
        region: 'oss-' + profile.defaultRegion
    }).getBucketLocation(bucket);
    debug('use bucket region %s', location.location);
    const client = OSS({
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        stsToken: profile.securityToken,
        bucket,
        region: location.location,
        timeout: profile.timeout * 1000
    });
    return client;
});
const getFcClient = (opts = {}) => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    const locale = yield osLocale();
    const mid = yield hashedMachineId();
    FC.prototype.getAccountSettings = function (options = {}, headers = {}) {
        return this.get('/account-settings', options, headers);
    };
    const accountId = profile.accountId ? profile.accountId : 'accountId';
    const accessKeyID = profile.accessKeyId ? profile.accessKeyId : 'accessKeyID';
    const accessKeySecret = profile.accessKeySecret ? profile.accessKeySecret : 'accessKeySecret';
    const securityToken = profile.securityToken;
    const region = profile.defaultRegion ? profile.defaultRegion : 'cn-hangzhou';
    const enable = profile.enableCustomEndpoint === true || profile.enableCustomEndpoint === 'true';
    const endpoint = profile.fcEndpoint ? profile.fcEndpoint : (enable ? profile.endpoint : undefined);
    const fc = new FC(accountId, {
        accessKeyID, accessKeySecret, securityToken, region, endpoint,
        timeout: opts.timeout || profile.timeout * 1000,
        secure: profile.protocol !== 'http',
        headers: {
            'user-agent': `${pkg.name}/v${pkg.version} ( Node.js ${process.version}; OS ${process.platform} ${process.arch}; language ${locale}; mid ${mid})`
        }
    });
    const realRequest = fc.request.bind(fc);
    fc.request = (method, path, query, body, headers, opts = {}) => __awaiter(this, void 0, void 0, function* () {
        try {
            return yield realRequest(method, path, query, body, headers || {}, opts || {});
        }
        catch (ex) {
            yield throwProcessedFCPermissionError(ex, ...path.split('/').filter(p => !!p));
            throw ex;
        }
    });
    return fc;
});
const getFnFClient = () => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    return new FnFClient({
        endpoint: `https://${profile.accountId}.${profile.defaultRegion}.fnf.aliyuncs.com`,
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        securityToken: profile.securityToken
    });
});
const getPopClient = (endpoint, apiVersion) => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    const pop = new Pop({
        endpoint: endpoint,
        apiVersion: apiVersion,
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        securityToken: profile.securityToken,
        opts: {
            timeout: profile.timeout * 1000
        }
    });
    const realRequest = pop.request.bind(pop);
    pop.request = (action, params, options) => __awaiter(this, void 0, void 0, function* () {
        try {
            return yield realRequest(action, params, options);
        }
        catch (ex) {
            yield throwProcessedPopPermissionError(ex, action);
            throw ex;
        }
    });
    return pop;
});
const getOtsPopClient = () => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    return yield getPopClient(`http://ots.${profile.defaultRegion}.aliyuncs.com`, '2016-06-20');
});
const getVpcPopClient = () => __awaiter(this, void 0, void 0, function* () {
    return yield getPopClient('https://vpc.aliyuncs.com', '2016-04-28');
});
const getEcsPopClient = () => __awaiter(this, void 0, void 0, function* () {
    return yield getPopClient('https://ecs.aliyuncs.com', '2014-05-26');
});
const getNasPopClient = () => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    return yield getPopClient(`http://nas.${profile.defaultRegion}.aliyuncs.com`, '2017-06-26');
});
const getXtraceClient = () => __awaiter(this, void 0, void 0, function* () {
    const { defaultRegion } = yield getProfile();
    return yield getPopClient(`https://xtrace.${defaultRegion}.aliyuncs.com`, '2019-08-08');
});
const getOtsClient = (instanceName) => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    var endpoint = `http://${instanceName}.${profile.defaultRegion}.ots.aliyuncs.com`;
    return new TableStore.Client({
        accessKeyId: profile.accessKeyId,
        secretAccessKey: profile.accessKeySecret,
        securityToken: profile.securityToken,
        endpoint: endpoint,
        instancename: instanceName
    });
});
const getMnsClient = (topicName, region) => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    return new MNSClient(profile.accountId, {
        region: region,
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        securityToken: profile.securityToken,
        // optional & default
        secure: false,
        internal: false,
        vpc: false // use vpc endpoint
    });
});
const getCloudApiClient = () => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    return new CloudAPI({
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        securityToken: profile.securityToken,
        endpoint: `http://apigateway.${profile.defaultRegion}.aliyuncs.com`,
        opts: {
            timeout: profile.timeout * 1000
        }
    });
});
const getSlsClient = () => __awaiter(this, void 0, void 0, function* () {
    const profile = yield getProfile();
    const log = new Log({
        region: profile.defaultRegion,
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        securityToken: profile.securityToken
    });
    const realRequest = log._request.bind(log);
    log._request = (verb, projectName, path, queries, body, headers, options) => __awaiter(this, void 0, void 0, function* () {
        try {
            return yield realRequest(verb, projectName, path, queries, body, headers, options);
        }
        catch (ex) {
            yield throwProcessedSLSPermissionError(ex);
            throw ex;
        }
    });
    return log;
});
module.exports = {
    getXtraceClient,
    getFcClient,
    getOtsClient,
    getOtsPopClient,
    getMnsClient,
    getCloudApiClient,
    getSlsClient,
    getPopClient,
    getVpcPopClient,
    getEcsPopClient,
    getNasPopClient,
    getOssClient,
    getRosClient,
    getFnFClient
};
