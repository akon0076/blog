'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { startInstallationContainer } = require('../../lib/docker');
const _ = require('lodash');
const path = require('path');
const nasTargetProtocal = 'nas://';
const fileTargetProtocal = 'file://';
function convertInstallTargetToAbsHostPath(target) {
    if (!target || !_.isString(target)) {
        throw new Error('invalid target: ' + target);
    }
    if (target.startsWith(nasTargetProtocal)) {
        throw new Error('only support \'file://\' protocal for fun.yml target attribute');
    }
    if (target.startsWith(fileTargetProtocal)) {
        target = target.substring(fileTargetProtocal.length);
    }
    const absTarget = path.resolve(target);
    return absTarget;
}
class Context {
    constructor(runtime, codeUri, targets) {
        this.runtime = runtime;
        this.codeUri = codeUri;
        this.targets = {};
        if (targets) {
            let count = 0;
            for (let target of targets) {
                const hostPath = convertInstallTargetToAbsHostPath(target);
                const containerPath = '/install/target' + (++count);
                this.targets[target] = {
                    hostPath,
                    containerPath
                };
            }
        }
        return (() => __awaiter(this, void 0, void 0, function* () { yield this.setup(); return this; }))();
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            this.runner = yield startInstallationContainer({ runtime: this.runtime, codeUri: this.codeUri, targets: this.targets });
        });
    }
    teardown() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runner.stop();
            this.runner = undefined;
        });
    }
}
module.exports = Context;
