'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { startSboxContainer, pullImageIfNeed, resolveNasConfigToMounts, resolveCodeUriToMount, resolvePasswdMount } = require('../docker');
const _ = require('lodash');
const { resolveRuntimeToDockerImage } = require('../docker-opts');
const definition = require('../definition');
const { detectTplPath, getTpl, validateTplName } = require('../tpl');
const { addEnv } = require('../install/env');
const { red } = require('colors');
const path = require('path');
const nas = require('../nas');
function sbox(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const funcPath = options.function;
        const cmd = options.cmd;
        let envs = options.envs;
        const isInteractive = options.interactive;
        const isTty = isInteractive && process.stdin.isTTY || false;
        let tplPath = options.template, codeUri, runtime = options.runtime, mounts = [];
        if (funcPath) {
            if (!tplPath) {
                tplPath = yield detectTplPath(false);
            }
            if (!tplPath) {
                console.error(red('The `template.yml` file is not found in current directory.'));
                return;
            }
            validateTplName(tplPath);
            const baseDir = path.resolve(path.dirname(tplPath));
            const tpl = yield getTpl(tplPath);
            const { functionRes, serviceName, serviceRes } = definition.findFunctionInTpl(funcPath, tpl);
            if (!functionRes) {
                throw new Error(red(`can not find function ${funcPath}`));
            }
            codeUri = path.resolve(baseDir, functionRes.Properties.CodeUri);
            if (!runtime) {
                runtime = functionRes.Properties.Runtime;
            }
            const nasConfig = (serviceRes.Properties || {}).NasConfig;
            mounts = yield resolveNasConfigToMounts(baseDir, serviceName, nasConfig, nas.getDefaultNasDir(baseDir));
            envs = addEnv(envs, nasConfig);
        }
        else if (options.runtime) {
            codeUri = process.cwd();
        }
        mounts.push(yield resolveCodeUriToMount(codeUri, false));
        mounts.push(yield resolvePasswdMount());
        const imageName = yield resolveRuntimeToDockerImage(runtime, true);
        yield pullImageIfNeed(imageName);
        yield startSboxContainer({
            runtime,
            imageName,
            mounts: _.compact(mounts),
            cmd,
            envs,
            isTty,
            isInteractive
        });
    });
}
module.exports = sbox;
