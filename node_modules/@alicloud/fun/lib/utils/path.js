'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const uuid = require('uuid');
const tempDir = require('temp-dir');
const { red } = require('colors');
const { detectTmpDir } = require('../tpl');
function ensureTmpDir(tmpDir, tplPath, serviceName, functionName) {
    return __awaiter(this, void 0, void 0, function* () {
        const absTmpDir = tmpDir ? path.resolve(tmpDir) : path.resolve(detectTmpDir(tplPath), serviceName, functionName);
        if (yield fs.pathExists(absTmpDir)) {
            const stats = yield fs.lstat(absTmpDir);
            if (stats.isFile()) {
                throw new Error(red(`'${absTmpDir}' should be a directory.`));
            }
        }
        else {
            yield fs.ensureDir(absTmpDir, {
                mode: parseInt('0777', 8)
            });
        }
        return absTmpDir;
    });
}
function generateRandomZipPath(zipName = 'code.zip') {
    return __awaiter(this, void 0, void 0, function* () {
        const randomDirName = uuid.v4();
        const randomDir = path.join(tempDir, randomDirName);
        yield fs.ensureDir(randomDir);
        const zipPath = path.join(randomDir, zipName);
        return {
            zipPath,
            randomDir
        };
    });
}
module.exports = { ensureTmpDir, generateRandomZipPath };
