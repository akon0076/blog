'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const os = require('os');
const path = require('path');
const fs = require('fs-extra');
const expect = require('expect.js');
const rimraf = require('rimraf');
const { makeTmpDir } = require('../lib/path');
describe('makeTmpDir function test', () => {
    const nasTmpDir = path.join(os.tmpdir(), '.fun_nas_tmp');
    afterEach(() => {
        rimraf.sync(nasTmpDir);
    });
    it('nasTmpDir not exist', () => __awaiter(this, void 0, void 0, function* () {
        yield makeTmpDir(nasTmpDir);
        const stats = yield fs.lstat(nasTmpDir);
        expect(stats.mode).to.eql(17407);
    }));
});
