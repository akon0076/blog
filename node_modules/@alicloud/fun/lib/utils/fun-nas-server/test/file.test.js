'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const os = require('os');
const fs = require('fs-extra');
const path = require('path');
const expect = require('expect.js');
const rimraf = require('rimraf');
const file = require('../lib/file');
//test.file.zip中的文件名为 test.file, 其权限为 -rwxrwxrwx , 对应 fs.stat.mode === 33279
const unzipDst = path.join(__dirname, 'unzip-folder');
describe('file.js test', () => {
    const dirName = path.join(os.tmpdir(), '.file', '/');
    const filePath = path.join(dirName, 'test.file');
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        yield fs.mkdirp(dirName);
        yield fs.mkdirp(unzipDst);
        yield fs.writeFile(filePath, 'this is a test');
    }));
    afterEach(() => {
        rimraf.sync(dirName);
        rimraf.sync(unzipDst);
    });
    it('function writeBufToFile resolve test', () => __awaiter(this, void 0, void 0, function* () {
        const data = new Buffer('this is a test 123');
        let res = yield file.writeBufToFile(filePath, data);
        expect(res).to.be.empty;
    }));
    it('function writeBufToFile reject test', () => __awaiter(this, void 0, void 0, function* () {
        const data = new Buffer('this is a test 123');
        try {
            yield file.writeBufToFile(dirName, data);
        }
        catch (error) {
            expect(error).to.be.an(Error);
        }
    }));
    it('function isDir true test', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield file.isDir(dirName);
        expect(res).to.eql(true);
    }));
    it('function isDir false test', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield file.isDir(filePath);
        expect(res).to.eql(false);
    }));
    it('function isFile true test', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield file.isFile(filePath);
        expect(res).to.eql(true);
    }));
    it('function isFile false test', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield file.isFile(dirName);
        expect(res).to.eql(false);
    }));
    it('function exists true test', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield file.exists(dirName);
        expect(res).to.eql(true);
    }));
    it('function exists false test', () => __awaiter(this, void 0, void 0, function* () {
        const localNotExistPath = path.join(dirName, '.not-exist-path');
        const res = yield file.exists(localNotExistPath);
        expect(res).to.eql(false);
    }));
});
