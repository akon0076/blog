'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const os = require('os');
const fs = require('fs-extra');
const rimraf = require('rimraf');
const expect = require('expect.js');
let execute = require('../lib/execute');
describe('execute ls command test.', () => {
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        yield fs.mkdirp(`${os.tmpdir()}/.fc-fun-nas-test-dir/`);
        yield fs.writeFile(`${os.tmpdir()}/.fc-fun-nas-test-dir/test.txt`, 'this is a test');
    }));
    afterEach(() => {
        rimraf.sync(`${os.tmpdir()}/.fc-fun-nas-test-dir/`);
    });
    it('valid ls command test', () => __awaiter(this, void 0, void 0, function* () {
        const lsPath = `${os.tmpdir()}/.fc-fun-nas-test-dir/`;
        const cmd = `ls ${lsPath}`;
        let res = yield execute(cmd);
        expect(res).to.eql({
            stdout: 'test.txt\n',
            stderr: ''
        });
    }));
    it('invalid ls command test', () => __awaiter(this, void 0, void 0, function* () {
        const lsPath = `${os.tmpdir()}/.fc-fun-nas-test-dir/invalid/`;
        const cmd = `ls ${lsPath}`;
        try {
            yield execute(cmd);
        }
        catch (error) {
            expect(error);
        }
    }));
});
