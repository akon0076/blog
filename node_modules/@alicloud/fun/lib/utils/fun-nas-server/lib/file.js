'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const md5File = require('md5-file/promise');
function pathJudge(inputPath, type) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const stats = yield fs.lstat(inputPath);
            switch (type) {
                case 'exists': return true;
                case 'isFile': return stats.isFile();
                case 'isDir': return stats.isDirectory();
                default: throw new Error('unsupported type in pathJudge function.');
            }
        }
        catch (error) {
            if (error.code === 'ENOENT') {
                return false;
            }
            throw error;
        }
    });
}
function isDir(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield pathJudge(inputPath, 'isDir');
    });
}
function isFile(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield pathJudge(inputPath, 'isFile');
    });
}
function exists(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield pathJudge(inputPath, 'exists');
    });
}
function getFileHash(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield isFile(filePath)) {
            return yield md5File(filePath);
        }
        throw new Error('get file hash error, target is not a file, target path is: ' + filePath);
    });
}
function writeBufToFile(dstPath, buf, start) {
    return new Promise((resolve, reject) => {
        const ws = fs.createWriteStream(dstPath, { start: start, flags: 'r+' });
        ws.write(buf);
        ws.end();
        ws.on('finish', () => {
            console.log(`${dstPath} wirte done`);
            resolve();
        });
        ws.on('error', (error) => {
            console.log(`${dstPath} write error : ${error}`);
            reject(error);
        });
    });
}
module.exports = {
    isDir,
    isFile,
    exists,
    getFileHash,
    writeBufToFile
};
