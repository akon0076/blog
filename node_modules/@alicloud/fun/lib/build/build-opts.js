'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const docker = require('../docker');
const dockerOpts = require('../docker-opts');
const definition = require('../definition');
const path = require('path');
const nas = require('../nas');
const _ = require('lodash');
const fs = require('fs-extra');
const buildkit = require('../buildkit');
function generateBuildContainerBuildOpts(serviceName, serviceRes, functionName, functionRes, baseDir, codeUri, funcArtifactDir, verbose, preferredImage, stages) {
    return __awaiter(this, void 0, void 0, function* () {
        const functionProps = functionRes.Properties;
        const runtime = functionProps.Runtime;
        const containerName = docker.generateRamdomContainerName();
        const envs = yield docker.generateDockerEnvs(baseDir, serviceName, serviceRes.Properties, functionName, functionProps, null, null);
        const codeMount = yield docker.resolveCodeUriToMount(path.resolve(baseDir, codeUri), false);
        const nasConfig = definition.findNasConfigInService(serviceRes);
        const nasMounts = yield docker.resolveNasConfigToMounts(baseDir, serviceName, nasConfig, nas.getDefaultNasDir(baseDir));
        const passwdMount = yield docker.resolvePasswdMount();
        const funcArtifactMountDir = '/artifactsMount';
        const artifactDirMount = {
            Type: 'bind',
            Source: funcArtifactDir,
            Target: funcArtifactMountDir,
            ReadOnly: false
        };
        const mounts = _.compact([codeMount, artifactDirMount, ...nasMounts, passwdMount]);
        const params = {
            method: 'build',
            serviceName,
            functionName,
            sourceDir: '/code',
            runtime,
            artifactDir: codeUri === funcArtifactDir ? '/code' : funcArtifactMountDir,
            stages,
            verbose
        };
        const cmd = ['fun-install', 'build', '--json-params', JSON.stringify(params)];
        const opts = yield dockerOpts.generateContainerBuildOpts(runtime, containerName, mounts, cmd, envs, preferredImage);
        return opts;
    });
}
function generateDockerfileForBuildkit(dockerfilePath, serviceName, serviceRes, functionName, functionRes, baseDir, codeUri, funcArtifactDir, verbose, stages, targetBuildStage) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Generating dockerfile in buildkit format.');
        const functionProps = functionRes.Properties;
        const runtime = functionProps.Runtime;
        const envs = yield docker.generateDockerfileEnvs(baseDir, serviceName, serviceRes.Properties, functionName, functionProps, null, null);
        const codeMount = yield docker.resolveCodeUriToMount(path.resolve(baseDir, codeUri), false);
        const nasConfig = definition.findNasConfigInService(serviceRes);
        const nasMounts = yield docker.resolveNasConfigToMounts(baseDir, serviceName, nasConfig, nas.getDefaultNasDir(baseDir));
        const funcArtifactMountDir = '/artifactsMount';
        const artifactDirMount = {
            Type: 'bind',
            Source: funcArtifactDir,
            Target: funcArtifactMountDir,
            ReadOnly: false
        };
        // add password to /etc/passwd
        const passwdMount = yield buildkit.resolvePasswdMount(baseDir);
        const mountsInDocker = _.compact([codeMount, artifactDirMount, ...nasMounts, passwdMount]);
        const { fromSrcToDstPairsInBuild, fromSrcToDstPairsInOutput } = buildkit.generateSrcDstPairsFromMounts(mountsInDocker);
        const params = {
            'method': 'build',
            'serviceName': serviceName,
            'functionName': functionName,
            'sourceDir': '/code',
            'runtime': runtime,
            'artifactDir': codeUri === funcArtifactDir ? '/code' : funcArtifactMountDir,
            'stages': stages,
            'verbose': verbose
        };
        const cmd = `fun-install build --json-params '${JSON.stringify(params)}'`;
        const contentDir = baseDir;
        const dockerfileContent = yield buildkit.dockerfileForBuildkit(runtime, fromSrcToDstPairsInOutput, fromSrcToDstPairsInBuild, contentDir, targetBuildStage, envs, cmd);
        yield fs.writeFile(dockerfilePath, dockerfileContent);
    });
}
module.exports = { generateBuildContainerBuildOpts, generateDockerfileForBuildkit };
