var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { execSync } = require('child_process');
const { yellow } = require('colors');
const path = require('path');
const fs = require('fs-extra');
function dockerBuildAndPush(dockerfileUri, image, baseDir, functionName, serviceName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!image) {
            console.log(yellow(`The mirror under '${serviceName}/${functionName}' is empty.`));
            return;
        }
        let dockerfile = path.join(baseDir, dockerfileUri || '');
        if (!(yield fs.exists(dockerfile))) {
            throw new Error(`File ${dockerfile} not found.`);
        }
        const stat = yield fs.stat(dockerfile);
        if (stat.isDirectory()) {
            dockerfile = path.join(dockerfile, 'Dockerfile');
            if (!(yield fs.exists(dockerfile))) {
                throw new Error(`File ${dockerfile} not found.`);
            }
        }
        if (!(yield fs.exists(dockerfile))) {
            throw new Error(`File ${dockerfile} not found.`);
        }
        execSync(`docker build -t ${image} -f ${dockerfile} .`, {
            stdio: 'inherit'
        });
    });
}
function buildkitBuild(dockerfileUri, image, baseDir, functionName, serviceName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!image) {
            console.log(yellow(`The mirror under '${serviceName}/${functionName}' is empty.`));
            return;
        }
        let dockerfile = path.join(baseDir, dockerfileUri || '');
        if (!(yield fs.exists(dockerfile))) {
            throw new Error(`File ${dockerfile} not found.`);
        }
        const stat = yield fs.stat(dockerfile);
        if (stat.isDirectory()) {
            dockerfile = path.join(dockerfile, 'Dockerfile');
            if (!(yield fs.exists(dockerfile))) {
                throw new Error(`File ${dockerfile} not found.`);
            }
        }
        if (!(yield fs.exists(dockerfile))) {
            throw new Error(`File ${dockerfile} not found.`);
        }
        execSync(`buildctl build --no-cache \
            --frontend dockerfile.v0 \
            --local context=${path.dirname(dockerfile)} \
            --local dockerfile=${path.dirname(dockerfile)} \
            --output type=image,name=${image},push=true`, {
            stdio: 'inherit'
        });
    });
}
module.exports = {
    dockerBuildAndPush,
    buildkitBuild
};
