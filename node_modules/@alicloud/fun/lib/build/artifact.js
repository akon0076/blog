'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const debug = require('debug');
function generateRootArtifactDirectory(baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const rootArtifactsDir = path.join(baseDir, '.fun', 'build', 'artifacts');
        yield fs.mkdirp(rootArtifactsDir);
        return rootArtifactsDir;
    });
}
function generateArtifactDirectory(rootArtifactsDir, serviceName, functionName) {
    return __awaiter(this, void 0, void 0, function* () {
        const funcArtifactDir = path.join(rootArtifactsDir, serviceName, functionName);
        yield fs.mkdirp(funcArtifactDir);
        return funcArtifactDir;
    });
}
function cleanDirectory(directory) {
    return __awaiter(this, void 0, void 0, function* () {
        debug(`check directory ${directory} exist?`);
        if (yield fs.pathExists(directory)) {
            debug(`directory ${directory} exist, begin to remove`);
            yield fs.remove(directory);
            debug(`directory ${directory} removed, begin to create`);
            yield fs.mkdir(directory);
        }
    });
}
module.exports = {
    generateRootArtifactDirectory,
    generateArtifactDirectory,
    cleanDirectory
};
