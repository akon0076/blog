var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { getProfile } = require('./profile');
const { getOssClient } = require('./client');
const { promptForConfirmContinue, promptForInputContinue } = require('./init/prompt');
const { yellow } = require('colors');
const _ = require('lodash');
function bucketExist(ossClient, bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        let bucketExist = false;
        try {
            const { location } = yield ossClient.getBucketLocation(bucketName);
            const { defaultRegion } = yield getProfile();
            if (location !== `oss-${defaultRegion}`) {
                throw new Error(`\nThe current oss-bucket region is ${location}, which is different from the configured region ${defaultRegion}.\n`);
            }
            bucketExist = true;
        }
        catch (ex) {
            if (!ex.code || !_.includes(['AccessDenied', 'NoSuchBucket'], ex.code)) {
                throw ex;
            }
        }
        return bucketExist;
    });
}
function generateOssBucket(bucketName, assumeYes) {
    return __awaiter(this, void 0, void 0, function* () {
        const ossClient = yield getOssClient();
        if (yield bucketExist(ossClient, bucketName)) {
            console.log(yellow(`using oss-bucket: ${bucketName}`));
            return bucketName;
        }
        console.log(yellow(`using oss-bucket: ${bucketName}`));
        if (!assumeYes && (process.stdin.isTTY && !(yield promptForConfirmContinue('Auto generate OSS bucket for you?')))) {
            bucketName = (yield promptForInputContinue('Input OSS bucket name:')).input;
        }
        yield ossClient.putBucket(bucketName);
        return bucketName;
    });
}
function processOSSBucket(bucket, assumeYes) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!bucket) {
            const profile = yield getProfile();
            const defalutBucket = `fun-gen-${profile.defaultRegion}-${profile.accountId}`;
            return yield generateOssBucket(defalutBucket, assumeYes);
        }
        return yield generateOssBucket(bucket, assumeYes);
    });
}
module.exports = {
    processOSSBucket
};
