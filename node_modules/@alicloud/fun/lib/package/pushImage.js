var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const _ = require('lodash');
const { execSync } = require('child_process');
function getpushRegistry(image, pushRegistry, region, configImage) {
    return __awaiter(this, void 0, void 0, function* () {
        const imageArr = image.split('/');
        if (pushRegistry === 'acr-internet') {
            imageArr[0] = `registry.${region}.aliyuncs.com`;
            image = imageArr.join('/');
        }
        else if (pushRegistry === 'acr-vpc') {
            imageArr[0] = `registry-vpc.${region}.aliyuncs.com`;
            image = imageArr.join('/');
        }
        else if (pushRegistry) {
            imageArr[0] = pushRegistry;
            image = imageArr.join('/');
        }
        console.log(`docker tag ${configImage} ${image}`);
        execSync(`docker tag ${configImage} ${image}`, {
            stdio: 'inherit'
        });
        console.log(`docker push ${image}`);
        execSync(`docker push ${image}`, {
            stdio: 'inherit'
        });
    });
}
function getFunctionImage({ tpl, pushRegistry, region }) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const k of _.keys(tpl)) {
            const v = tpl[k];
            if (_.isObject(v)) {
                if (v.Type === 'Aliyun::Serverless::Function') {
                    const { CustomContainerConfig = {} } = v.Properties || {};
                    let image = CustomContainerConfig.Image;
                    if (image) {
                        yield getpushRegistry(image, pushRegistry, region, CustomContainerConfig.Image);
                    }
                }
                else {
                    yield getFunctionImage({ tpl: v, pushRegistry, region });
                }
            }
        }
    });
}
module.exports = {
    getFunctionImage, getpushRegistry
};
