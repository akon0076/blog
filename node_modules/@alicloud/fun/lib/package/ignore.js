'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const parser = require('git-ignore-parser'), ignore = require('ignore'), fs = require('fs-extra'), path = require('path'), _ = require('lodash');
const { generateIgnoreFileFromNasYml } = require('../nas/support');
const ignoredFile = ['.git', '.svn', '.env', '.DS_Store', 'template.packaged.yml', '.nas.yml', '.fun/nas', '.fun/tmp', '.fun/package'];
function selectIgnored(runtime) {
    switch (runtime) {
        case 'nodejs6':
        case 'nodejs8':
        case 'nodejs10':
        case 'nodejs12':
            return ['.fun/python'];
        case 'python2.7':
        case 'python3':
            return ['node_modules'];
        case 'php7.2':
            return ['node_modules', '.fun/python'];
        default:
            return [];
    }
}
function getIgnoreContent(ignoreFilePath) {
    return __awaiter(this, void 0, void 0, function* () {
        let fileContent = '';
        if (fs.existsSync(ignoreFilePath)) {
            fileContent = yield fs.readFile(ignoreFilePath, 'utf8');
        }
        return fileContent;
    });
}
function isIgnored(baseDir, runtime) {
    return __awaiter(this, void 0, void 0, function* () {
        const ignoreFilePath = `${baseDir}/.funignore`;
        const fileContent = yield getIgnoreContent(ignoreFilePath);
        const ignoreDependencies = selectIgnored(runtime);
        const ignoreList = yield generateIgnoreFileFromNasYml(baseDir);
        const ignoredPaths = parser(`${[...ignoredFile, ...ignoreList, ...ignoreDependencies].join('\n')}\n${fileContent}`);
        const ig = ignore().add(ignoredPaths);
        return function (f) {
            const relativePath = path.relative(baseDir, f);
            if (relativePath === '') {
                return false;
            }
            return ig.ignores(relativePath);
        };
    });
}
;
function updateIgnore(baseDir, patterns) {
    return __awaiter(this, void 0, void 0, function* () {
        const ignoreFilePath = `${baseDir}/.funignore`;
        const fileContent = yield getIgnoreContent(ignoreFilePath);
        let lines = fileContent.split(/\r?\n/);
        for (let i = 0; i < patterns.length; i++) {
            if (!_.includes(lines, patterns[i])) {
                lines.push(patterns[i]);
            }
        }
        yield fs.writeFile(ignoreFilePath, lines.join('\n'));
    });
}
module.exports = {
    isIgnored,
    updateIgnore
};
