'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { sendCmdRequest, getNasHttpTriggerPath, statsRequest } = require('./request');
const { green, red } = require('colors');
const { checkWritePerm } = require('./support');
function generateRmCmd(nasPath, isRecursiveOpt, isForceOpt) {
    let cmd = 'rm ' + (isRecursiveOpt ? '-R ' : '') + (isForceOpt ? '-f ' : '') + nasPath;
    return cmd;
}
function rm(serviceName, nasPath, isRecursiveOpt, isForceOpt, nasId) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Removing...');
        const nasHttpTriggerPath = getNasHttpTriggerPath(serviceName);
        const statsRes = yield statsRequest(nasPath, nasHttpTriggerPath);
        const stats = statsRes.data;
        if (!stats.exists) {
            throw new Error(`${nasPath} not exist`);
        }
        if (stats.isDir && !isRecursiveOpt) {
            throw new Error(`fun nas rm: ${nasPath}: is a directory`);
        }
        const permTip = checkWritePerm(stats, nasId, nasPath);
        if (permTip) {
            const warningInfo = `fun nas rm: ${permTip}`;
            console.log(red(`Warning: ${warningInfo}`));
        }
        const rmCmd = generateRmCmd(nasPath, isRecursiveOpt, isForceOpt);
        const rmResponse = yield sendCmdRequest(nasHttpTriggerPath, rmCmd);
        console.log(rmResponse.data.stdout);
        console.log(rmResponse.data.stderr);
        console.log(`${green('âœ”')} remove ${nasPath} done`);
    });
}
module.exports = rm;
