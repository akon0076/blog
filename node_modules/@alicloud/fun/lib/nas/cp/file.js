'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const zip = require('../../package/zip');
const md5File = require('md5-file/promise');
const _ = require('lodash');
function zipWithArchiver(srcPath, localNasTmpDir) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield fs.pathExists(srcPath))) {
            throw new Error('folder not exist: ' + srcPath);
        }
        if (yield isFile(srcPath)) {
            throw new Error('zipWithArchiver not support a file');
        }
        const targetName = path.basename(srcPath);
        //以当前操作的 unix 时间戳作为临时目录名称
        const curTime = new Date().getTime().toString();
        const zipDstDir = path.join(localNasTmpDir, curTime);
        const zipDst = path.join(zipDstDir, `.fun-nas-generated-${targetName}.zip`);
        yield fs.ensureDir(zipDstDir);
        yield zip.packTo(srcPath, null, zipDst);
        return zipDst;
    });
}
function isDir(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = yield fs.lstat(inputPath);
        return stats.isDirectory();
    });
}
function isFile(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = yield fs.lstat(inputPath);
        return stats.isFile();
    });
}
function getFileHash(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const file = yield isFile(filePath);
        if (file) {
            return yield md5File(filePath);
        }
        throw new Error('get file hash error, target is not a file, target path is: ' + filePath);
    });
}
function isEmptyDir(path) {
    const lstat = fs.lstatSync(path);
    if (lstat.isDirectory()) {
        const dirs = fs.readdirSync(path);
        if (_.isEmpty(dirs)) {
            return true;
        }
    }
    return false;
}
// only if the path is directory and there are files in the directory, will true be returned
function isNotEmptyDir(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const lstat = yield fs.lstat(path);
        if (lstat.isDirectory()) {
            const dirs = yield fs.readdir(path);
            if (!_.isEmpty(dirs)) {
                return true;
            }
        }
        return false;
    });
}
function getFileSize(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const stat = yield fs.lstat(filePath);
        return stat.size;
    });
}
function readFileChunk(filePath, start, size) {
    return __awaiter(this, void 0, void 0, function* () {
        const fd = yield fs.open(filePath, 'r');
        const chunkBuf = Buffer.alloc(size);
        const { bytesRead } = yield fs.read(fd, chunkBuf, 0, size, start);
        if (bytesRead !== size) {
            throw new Error(`ReadChunkFile function bytesRead not equal read size`);
        }
        yield fs.close(fd);
        return chunkBuf;
    });
}
function getFilePermission(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const stat = yield fs.lstat(filePath);
        const permission = '0' + (stat.mode & parseInt('777', 8)).toString(8);
        return permission;
    });
}
function writeBufToFile(dstPath, buf) {
    return new Promise((resolve, reject) => {
        const ws = fs.createWriteStream(dstPath);
        ws.write(buf);
        ws.end();
        ws.on('finish', () => {
            resolve();
        });
        ws.on('error', (error) => {
            console.log(`${dstPath} write error : ${error}`);
            reject(error);
        });
    });
}
module.exports = {
    isDir, isFile, isEmptyDir, isNotEmptyDir,
    getFileHash, getFileSize, getFilePermission,
    zipWithArchiver, readFileChunk, writeBufToFile
};
