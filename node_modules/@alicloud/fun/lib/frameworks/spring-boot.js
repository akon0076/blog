'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const fs = require('fs-extra');
const _ = require('lodash');
const file = require('./common/file');
const { isSpringBootJar } = require('./common/java');
const { updateIgnore } = require('../package/ignore');
const updateFunIgnoreProcessor = {
    'type': 'function',
    'function': (codeDir, baseDir) => __awaiter(this, void 0, void 0, function* () {
        updateIgnore(baseDir, [
            'target/*',
            '!target/*.jar',
            'src',
            '.gradle',
            '.settings/',
            '.classpath',
            '.project',
            '.settings',
            '.springBeans',
            'bin/',
            '.idea/',
            '.idea',
            '*.iws',
            '*.iml',
            '*.ipr',
            '.DS_Store'
        ]);
    })
};
const springboot = {
    'id': 'springboot',
    'runtime': 'java',
    'website': 'https://spring.io/projects/spring-boot/',
    'detectors': {
        'or': [
            {
                'type': 'regex',
                'path': 'pom.xml',
                'content': '<artifactId>\\s*spring-boot-starter-parent\\s*</artifactId>'
            },
            {
                'type': 'file',
                'path': /\.jar$/
            }
        ]
    },
    'actions': [
        {
            'condition': {
                'and': [
                    {
                        'type': 'file',
                        'path': /\.jar$/
                    }
                ]
            },
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const jars = yield file.listDir(codeDir, /\.jar$/);
                        if (jars.length > 1) {
                            throw new Error('We detected you have more than 1 jar in current folder.');
                        }
                        const jar = jars[0];
                        if (!(yield isSpringBootJar(jar))) {
                            throw new Error('Only Spring Boot jar is supported');
                        }
                        const bootstrap = `#!/usr/bin/env bash
export PORT=9000
java -jar -Dserver.port=$PORT ${path.relative(codeDir, jar)}
`;
                        yield fs.writeFile('bootstrap', bootstrap, {
                            mode: '0755'
                        });
                    })
                },
                updateFunIgnoreProcessor
            ]
        },
        {
            'condition': true,
            'description': 'find jar under target/ and generate bootstrap',
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const targetPath = path.join(codeDir, 'target');
                        if (!(yield fs.pathExists(targetPath))) {
                            throw new Error(`You must package your SpringBoot project before deploying.
You can use 'mvn package' to package SpringBoot to a jar.`);
                        }
                        const targetContents = yield fs.readdir(targetPath);
                        let jarFiles = [];
                        for (const file of targetContents) {
                            if (_.endsWith(file, '.jar')) {
                                const absFile = path.join(targetPath, file);
                                const relative = path.relative(codeDir, absFile);
                                jarFiles.push(relative.split(path.sep).join('/'));
                            }
                        }
                        if (jarFiles.length === 0) {
                            throw new Error(`Could not find any jar from 'target' folder.
You can use 'mvn package' to package SpringBoot to a jar.`);
                        }
                        if (jarFiles.length > 1) {
                            throw new Error(`Found more than one jar files from 'target' folder`);
                        }
                        const bootstrap = `#!/usr/bin/env bash
export PORT=9000
java -jar -Dserver.port=$PORT ${jarFiles[0]}
`;
                        yield fs.writeFile('bootstrap', bootstrap, {
                            mode: '0755'
                        });
                    })
                },
                updateFunIgnoreProcessor
            ]
        }
    ]
};
module.exports = springboot;
