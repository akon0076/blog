'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const fs = require('fs-extra');
const _ = require('lodash');
const file = require('./common/file');
const { downloadJetty } = require('./common/java');
const { updateIgnore } = require('../package/ignore');
const downloadJettyProcessor = {
    'type': 'function',
    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
        const dotFunPath = path.join(codeDir, '.fun');
        yield fs.ensureDir(dotFunPath);
        yield downloadJetty(codeDir);
    })
};
const updateFunIgnoreProcessor = {
    'type': 'function',
    'function': (codeDir, baseDir) => __awaiter(this, void 0, void 0, function* () {
        updateIgnore(baseDir, [
            'target/*',
            '!target/*.war',
            '!target/context.xml',
            'src',
            '.gradle',
            '.settings/',
            '.classpath',
            '.project',
            '.settings',
            '.springBeans',
            'bin/',
            '.idea/',
            '.idea',
            '*.iws',
            '*.iml',
            '*.ipr',
            '.DS_Store'
        ]);
    })
};
function generateBootstrap(codeDir, warPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const bootstrap = `#!/usr/bin/env bash
export JETTY_RUNNER=/code/.fun/root/usr/local/java/jetty-runner.jar
export PORT=9000
java -jar $JETTY_RUNNER --port $PORT --path / ${warPath}
`;
        yield fs.writeFile(path.join(codeDir, 'bootstrap'), bootstrap, {
            mode: '0755'
        });
    });
}
const war = {
    'id': 'war',
    'runtime': 'java',
    'website': 'https://en.wikipedia.org/wiki/WAR_(file_format)',
    'detectors': {
        'or': [
            {
                'type': 'regex',
                'path': 'pom.xml',
                'content': '<packaging>\\s*war\\s*</packaging>'
            },
            {
                'type': 'file',
                'path': /\.war$/
            }
        ]
    },
    'actions': [
        {
            'condition': {
                'and': [
                    {
                        'type': 'file',
                        'path': /\.war$/
                    }
                ]
            },
            'processors': [
                downloadJettyProcessor,
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const wars = yield file.listDir(codeDir, /\.war$/);
                        if (wars.length > 1) {
                            throw new Error('We detected you have more than 1 war in current folder.');
                        }
                        yield generateBootstrap(codeDir, path.relative(codeDir, wars[0]));
                    })
                },
                updateFunIgnoreProcessor
            ]
        },
        {
            'condition': true,
            'description': 'find war under target/ and generate bootstrap',
            'processors': [
                downloadJettyProcessor,
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const targetPath = path.join(codeDir, 'target');
                        if (!(yield fs.pathExists(targetPath))) {
                            throw new Error(`Please packaging your maven project before deploying.
You could use 'mvn package' to package a WAR.`);
                        }
                        const targetContents = yield fs.readdir(targetPath);
                        let warFiles = [];
                        for (const file of targetContents) {
                            if (_.endsWith(file, '.war')) {
                                const absFile = path.join(targetPath, file);
                                const relative = path.relative(codeDir, absFile);
                                warFiles.push(relative);
                            }
                        }
                        if (warFiles.length === 0) {
                            throw new Error(`Could not find any WAR from 'target' folder.
You can use 'mvn package' to package a WAR.`);
                        }
                        if (warFiles.length > 1) {
                            throw new Error(`Found more than one jar files from 'target' folder`);
                        }
                        yield generateBootstrap(codeDir, warFiles[0]);
                    })
                },
                updateFunIgnoreProcessor
            ]
        }
    ]
};
module.exports = war;
