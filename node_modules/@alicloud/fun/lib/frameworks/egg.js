'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const file = require('./common/file');
const path = require('path');
const { yellow } = require('colors');
const { promptForConfirmContinue } = require('../init/prompt');
const eggjs = {
    'id': 'egg.js',
    'runtime': 'nodejs',
    'website': 'https://eggjs.org/',
    'detectors': {
        'or': [
            {
                'type': 'regex',
                'path': 'package.json',
                'content': '"(dev)?(d|D)ependencies":\\s*{[^}]*"egg":\\s*".+?"[^}]*}'
            },
            {
                'type': 'regex',
                'path': 'package.json',
                'content': '"(dev)?(d|D)ependencies":\\s*{[^}]*"egg-bin":\\s*".+?"[^}]*}'
            }
        ]
    },
    'actions': [
        {
            'condition': true,
            'description': 'use npx egg-scripts to start server',
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const prodConfigPath = path.join(codeDir, 'config', 'config.prod.js');
                        const prodConfigContent = `'use strict';
module.exports = {
  rundir: '/tmp/run',
  logger: {
    dir: '/tmp/log'
  }
};
`;
                        const exists = yield fs.pathExists(prodConfigPath);
                        if (exists) {
                            console.log(`${yellow('Fun detected')} your production config '${yellow(prodConfigPath)}' file already exists`);
                            console.log(`You need to add these content to your production config file:`);
                            console.log(yellow(prodConfigContent));
                            yield promptForConfirmContinue(yellow(`Continue`));
                        }
                        else {
                            yield file.generateFile(prodConfigPath, true, parseInt('0755', 8), prodConfigContent);
                        }
                    })
                },
                {
                    'type': 'generateFile',
                    'path': 'bootstrap',
                    'mode': '0755',
                    'content': `#!/usr/bin/env bash
export PORT=9000
export EGG_SERVER_ENV=prod
npx --no-install egg-scripts start --workers=1
`
                }
            ]
        }
    ]
};
module.exports = eggjs;
