'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const path = require('path');
const { red, yellow } = require('colors');
const { promptForConfirmContinue } = require('../init/prompt');
const { findBinName } = require('./common/go');
const { exec } = require('./common/exec');
const { detectAndReplaceAddr } = require('./common/file');
const { isFcConsoleApplication } = require('./common/console');
const { detectElfBinary } = require('./common/file');
const go = {
    'id': 'gomodules',
    'runtime': 'go',
    'website': 'https://golang.org/',
    'detectors': {},
    'actions': [
        {
            'condition': true,
            'description': 'select binary from bin/ folder to start',
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        yield detectAndReplaceAddr({
                            codeDir,
                            mainFileSuffix: '.go',
                            mainFileRegex: 'func\\s+main\\s*\\(',
                            addrProcessores: [
                                // check gin and beego addr
                                {
                                    regex: new RegExp('\\.Run\\s*\\(\\s*\\)', 'm'),
                                    replacer: `.Run("0.0.0.0:9000")`
                                },
                                {
                                    regex: new RegExp('\\.Run\\s*\\(\\s*":\\d+"\\)', 'm'),
                                    replacer: `.Run("0.0.0.0:9000")`
                                }
                            ]
                        });
                        let needBuild = true;
                        let binName = yield findBinName(codeDir);
                        const buildCommand = 'GOARCH=amd64 GOOS=linux go build -ldflags "-s -w"';
                        if (!binName) {
                            if (isFcConsoleApplication()) {
                                throw new Error(`Could not find any bin files from current folder.\n
Before using deploying, you must use '${yellow(buildCommand)}' to comile your project.`);
                            }
                            const errorMessage = red(`Could not find any bin files from current folder.\n
Before using 'fun deploy', you must use '${yellow(buildCommand)}' to comile your project.`);
                            console.error(errorMessage);
                            if (yield promptForConfirmContinue(yellow(`Let Fun exec this command for you?`))) {
                                needBuild = false;
                                yield exec(buildCommand, codeDir);
                            }
                            binName = yield findBinName(codeDir);
                            if (!binName) {
                                throw new Error(red('could not find any bin files from current folder'));
                            }
                        }
                        const content = `#!/usr/bin/env bash
${isFcConsoleApplication() ? '' : 'export PORT=9000'}
export GIN_MODE=release
./${binName}`;
                        const bootstrapPath = path.join(codeDir, 'bootstrap');
                        yield fs.writeFile(bootstrapPath, content, {
                            mode: parseInt('0755', 8)
                        });
                        if (isFcConsoleApplication()) {
                            if (!(yield detectElfBinary(path.join(codeDir, binName)))) {
                                throw new Error(`Your bin file '${binName}' is not built for linux platform. You must use '${buildCommand}' to recompile your project every time before deploying.`);
                            }
                        }
                        else {
                            console.log(`${yellow('Tips:')} 
You must use '${yellow(buildCommand)}' to ${yellow('recompile')} your project every time before using fun deploy.`);
                            if (needBuild && (yield promptForConfirmContinue(yellow(`Let Fun exec this command now for you?`)))) {
                                yield exec(buildCommand, codeDir);
                            }
                        }
                    })
                }
            ]
        }
    ]
};
module.exports = go;
