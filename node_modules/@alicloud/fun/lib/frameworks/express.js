'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const { detectAndReplaceAddr, generateFile } = require('./common/file');
const { red } = require('colors');
const { isFcConsoleApplication } = require('./common/console');
const mainFileSuffix = '.js';
const mainFileRegex = '\\.listen\\s*\\(';
const addrProcessores = [
    {
        regex: new RegExp('\\.listen\\s*\\(\\s*([-0-9a-zA-Z._]+)\\s*,', 'm'),
        replacer: (match, p1) => {
            return `.listen(process.env.PORT || ${p1},`;
        }
    },
    {
        regex: new RegExp('\\.listen\\s*\\(\\s*([-0-9a-zA-Z._]+)\\s*\\)', 'm'),
        replacer: (match, p1) => {
            return `.listen(process.env.PORT || ${p1})`;
        }
    },
    {
        regex: new RegExp('\\.listen\\s*\\(\\s*\\)', 'm'),
        replacer: (match) => {
            return `.listen(process.env.PORT || 9000)`;
        }
    }
];
const express = {
    'id': 'Express',
    'runtime': 'nodejs',
    'website': 'http://www.expressjs.com.cn/',
    'detectors': {
        'and': [
            {
                'type': 'regex',
                'path': 'package.json',
                'content': '"(dev)?(d|D)ependencies":\\s*{[^}]*"express":\\s*".+?"[^}]*}'
            }
        ]
    },
    'actions': [
        {
            'condition': {
                'and': [
                    {
                        'type': 'json',
                        'path': 'package.json',
                        'jsonKey': 'scripts.start',
                        'jsonValueContains': 'bin/www'
                    },
                    {
                        'type': 'contains',
                        'path': 'bin/www',
                        'content': 'process.env.PORT'
                    }
                ]
            },
            'description': 'generated by express-generator',
            'processors': [
                {
                    'type': 'generateFile',
                    'path': 'bootstrap',
                    'mode': '0755',
                    'content': `#!/usr/bin/env bash
export PORT=9000
npm run start
`
                }
            ]
        },
        {
            'condition': {
                'and': [
                    {
                        'type': 'json',
                        'path': 'package.json',
                        'jsonKey': 'scripts.start'
                    }
                ]
            },
            'description': 'if found start script, use npm run start directly',
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        yield detectAndReplaceAddr({
                            codeDir,
                            mainFileSuffix,
                            mainFileRegex,
                            addrProcessores
                        });
                    })
                },
                {
                    'type': 'generateFile',
                    'path': 'bootstrap',
                    'mode': parseInt('0755', 8),
                    'content': `#!/usr/bin/env bash
${isFcConsoleApplication() ? '' : 'export PORT=9000'}
npm run start`
                }
            ]
        },
        {
            'condition': true,
            'description': '如果不是 generator 生成的，且没有 start script，则直接查找 mainFile',
            'processors': [
                {
                    'type': 'function',
                    'function': (codeDir) => __awaiter(this, void 0, void 0, function* () {
                        const { mainFile } = yield detectAndReplaceAddr({
                            codeDir,
                            mainFileSuffix,
                            mainFileRegex,
                            addrProcessores
                        });
                        const bootstrap = `#!/usr/bin/env bash
${isFcConsoleApplication() ? '' : 'export PORT=9000'}
node ${path.relative(codeDir, mainFile)}`;
                        if (!mainFile) {
                            throw new Error(red('Could not find any express main file. You must add \'start\' script to package.json manully'));
                        }
                        yield generateFile(path.join(codeDir, 'bootstrap'), true, parseInt('0755', 8), bootstrap);
                    })
                }
            ]
        }
    ]
};
module.exports = express;
