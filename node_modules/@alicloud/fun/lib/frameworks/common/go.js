'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const debug = require('debug')('fun:deploy');
const _ = require('lodash');
const fs = require('fs-extra');
const path = require('path');
function findBinNameByGoMod(codeDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const modFile = path.join(codeDir, 'go.mod');
        if (!(yield fs.pathExists(modFile))) {
            return null;
        }
        const contents = yield fs.readFile(modFile, 'utf8');
        for (const line of contents.split(/\r?\n/)) {
            const idx = line.indexOf('module ');
            if (idx >= 0) {
                let moduleName = _.trim(line.substring(idx + 'module '.length));
                const guessBinName = path.basename(moduleName);
                const guessPaths = ['.', 'bin'];
                for (const guessPath of guessPaths) {
                    const guessBinAbsPath = path.join(codeDir, guessPath, guessBinName);
                    debug(`checking file ${guessBinAbsPath} exists...`);
                    if (yield fs.pathExists(guessBinAbsPath)) {
                        return path.posix.join(guessPath, guessBinName);
                    }
                }
            }
        }
        return null;
    });
}
function findBinNameByBinFolder(codeDir) {
    return __awaiter(this, void 0, void 0, function* () {
        debug(`check bin/ folder exist...`);
        const binDir = path.join(codeDir, 'bin');
        if (!(yield fs.pathExists(binDir))) {
            return null;
        }
        const files = yield fs.readdir(binDir);
        if (files.length === 1) {
            if (files[0] !== 'bootstrap') {
                return path.posix.join('bin', files[0]);
            }
        }
        else if (files.length === 2 && files.includes(files, 'bootstrap')) {
            for (const file of files) {
                if (file !== 'bootstrap') {
                    return path.posix.join('bin', file);
                }
            }
        }
        debug('files of bin folder', files);
        return null;
    });
}
function findBinNameByProjectFolder(codeDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const name = path.basename(codeDir);
        const binName = path.join(codeDir, name);
        if (yield fs.pathExists(binName)) {
            return name;
        }
        return null;
    });
}
function findBinName(codeDir) {
    return __awaiter(this, void 0, void 0, function* () {
        let binName = yield findBinNameByGoMod(codeDir);
        if (!binName) {
            binName = yield findBinNameByProjectFolder(codeDir);
        }
        if (!binName) {
            binName = yield findBinNameByBinFolder(codeDir);
        }
        return binName;
    });
}
module.exports = {
    findBinName
};
