'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const zip = require('../../package/zip');
const _ = require('lodash');
const path = require('path');
const fs = require('fs-extra');
const httpx = require('httpx');
const tmpDir = require('temp-dir');
function isSpringBootJar(jarfilePath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const data = yield zip.readZipFile(jarfilePath, 'META-INF/MANIFEST.MF');
            const content = data.toString();
            return _.includes(content, 'Spring-Boot-Version');
        }
        catch (e) {
            return false;
        }
    });
}
function downloadJetty(codeDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const dotFunPath = path.join(codeDir, '.fun');
        let zipName = yield fs.readFile(path.join(__dirname, '..', 'support', 'war', 'ZIPNAME'), 'utf8');
        zipName = zipName.split(/\r?\n/)[0];
        const url = `https://gosspublic.alicdn.com/fun/frameworks/support/${zipName}`;
        const downloadPath = path.join(tmpDir, zipName);
        console.log(`downloading zip which contains jetty from ${url} to ${downloadPath}...`);
        if (!(yield fs.pathExists(downloadPath))) {
            const writeStream = fs.createWriteStream(downloadPath);
            const response = yield httpx.request(url, { timeout: 36000000, method: 'GET' }); // 10 hours
            yield new Promise((resolve, reject) => {
                response.pipe(writeStream).on('error', err => {
                    fs.removeSync(downloadPath);
                    reject(err);
                }).on('finish', resolve);
            });
        }
        console.log('extract zip which contains jetty to custom runtime...');
        yield zip.extractZipTo(downloadPath, dotFunPath);
    });
}
module.exports = {
    isSpringBootJar,
    downloadJetty
};
