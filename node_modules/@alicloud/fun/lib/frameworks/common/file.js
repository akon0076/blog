'use strcit';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const debug = require('debug')('fun:deploy');
const path = require('path');
const fs = require('fs-extra');
const _ = require('lodash');
const { yellow, red, green } = require('colors');
const { promptForConfirmContinue } = require('../../init/prompt');
const { isFcConsoleApplication, writePortFileForFcConsoleApplication } = require('./console');
function findMainFile(codeDir, fileSuffix, mainRegex) {
    return __awaiter(this, void 0, void 0, function* () {
        const regex = new RegExp(mainRegex, 'm');
        const files = yield fs.readdir(codeDir);
        for (const file of files) {
            if (!_.endsWith(file, fileSuffix)) {
                continue;
            }
            const contents = yield fs.readFile(path.join(codeDir, file), 'utf8');
            if (regex.test(contents)) {
                debug('mainFile is ', file);
                return path.join(codeDir, file);
            }
        }
        return null;
    });
}
function detectAndReplaceMainFileAddr(codeDir, mainFile, addrProcessores) {
    return __awaiter(this, void 0, void 0, function* () {
        const mainFileContents = yield fs.readFile(mainFile, 'utf8');
        for (const addrProcessor of addrProcessores) {
            const addrRegex = addrProcessor.regex;
            const replacer = addrProcessor.replacer;
            if (addrRegex.test(mainFileContents)) {
                if (isFcConsoleApplication()) {
                    yield writePortFileForFcConsoleApplication(codeDir);
                    return;
                }
                console.log(`${yellow('Fun detected')} your application doesn't listen on '${yellow('0.0.0.0:9000')}' in ${yellow(mainFile)}`);
                console.log(`Fun will replace your addr to '${yellow('0.0.0.0:9000')}', and also backup your origin file ${yellow(mainFile)} to ${yellow(mainFile + '.bak')}`);
                if (!(yield promptForConfirmContinue(yellow(`Are your sure?`)))) {
                    console.warn(red(`Fun will not modify your application listen addr, but if you want deploy to fc, you must listen on '0.0.0.0:9000'`));
                    return;
                }
                const replacedContent = mainFileContents.replace(addrRegex, (match, p1) => {
                    if (_.isFunction(replacer)) {
                        return replacer(match, p1);
                    }
                    return replacer;
                });
                yield fs.copyFile(mainFile, mainFile + '.bak');
                yield fs.writeFile(mainFile, replacedContent);
                return;
            }
        }
    });
}
function detectAndReplaceAddr({ codeDir, mainFileSuffix, mainFileRegex, addrProcessores }) {
    return __awaiter(this, void 0, void 0, function* () {
        const mainFile = yield findMainFile(codeDir, mainFileSuffix, mainFileRegex);
        if (!mainFile) {
            return { mainFile: null };
        }
        yield detectAndReplaceMainFileAddr(codeDir, mainFile, addrProcessores);
        return { mainFile };
    });
}
function generateFile(p, backup, mode, content) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(green('Generating ' + p + '...'));
        if (yield fs.pathExists(p)) {
            if (_.isNil(backup) || backup) {
                console.warn(red(`File ${p} already exists, Fun will rename to ${p}.bak`));
                yield fs.copyFile(p, `${p}.bak`, {
                    overwrite: true
                });
            }
        }
        yield fs.writeFile(p, content, {
            mode
        });
    });
}
function listDir(codeDir, regex) {
    return __awaiter(this, void 0, void 0, function* () {
        const rs = [];
        const files = yield fs.readdir(codeDir);
        for (const file of files) {
            if (regex.test(file)) {
                rs.push(path.join(codeDir, file));
            }
        }
        return rs;
    });
}
function detectElfBinary(binaryPath) {
    const MAGIC = 0x7f454c46; // 0x7f'E''L''F'
    return new Promise((resolve, reject) => {
        fs.open(binaryPath, 'r', (err, fd) => {
            if (err) {
                reject(err);
                return;
            }
            function done(err, rs) {
                fs.close(fd, function (cerr) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(rs);
                    }
                });
            }
            const ident = Buffer.alloc(16);
            fs.read(fd, ident, 0, 16, null, function (err, bytesRead) {
                if (err) {
                    return done(err);
                }
                const magic = ident.readUInt32BE(0);
                if (MAGIC !== magic) {
                    return done(null, false);
                }
                return done(null, true);
            });
        });
    });
}
module.exports = {
    detectAndReplaceAddr, generateFile, detectElfBinary, listDir
};
