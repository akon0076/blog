var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { getProfile } = require('./profile');
const { getFcClient } = require('./client');
const _ = require('lodash');
function makeDestination(serviceName, functionName, asyncConfiguration, qualifier = 'LATEST') {
    return __awaiter(this, void 0, void 0, function* () {
        const { accountId, defaultRegion } = yield getProfile();
        const { OnSuccess, OnFailure } = asyncConfiguration.Destination;
        const destinationConfig = {};
        if (OnSuccess) {
            destinationConfig.onSuccess = {
                destination: OnSuccess.replace(':::', `:${defaultRegion}:${accountId}:`)
            };
        }
        if (OnFailure) {
            destinationConfig.onFailure = {
                destination: OnFailure.replace(':::', `:${defaultRegion}:${accountId}:`)
            };
        }
        const asyncConfig = {
            maxAsyncRetryAttempts: asyncConfiguration.MaxAsyncRetryAttempts,
            maxAsyncEventAgeInSeconds: asyncConfiguration.MaxAsyncEventAgeInSeconds,
            statefulInvocation: asyncConfiguration.StatefulInvocation,
            destinationConfig
        };
        let hasAsyncConfig = false;
        const fcClient = yield getFcClient();
        try {
            const { data } = yield fcClient.getFunctionAsyncConfig(serviceName, functionName, qualifier);
            const asyncConfigCache = {
                destinationConfig: data.destinationConfig,
                maxAsyncEventAgeInSeconds: data.maxAsyncEventAgeInSeconds,
                statefulInvocation: data.statefulInvocation,
                maxAsyncRetryAttempts: data.maxAsyncRetryAttempts
            };
            if (_.isEqual(asyncConfig, asyncConfigCache)) {
                return;
            }
            hasAsyncConfig = true;
        }
        catch (ex) {
            if (ex.code !== 'AsyncConfigNotExists') {
                throw ex;
            }
        }
        if (hasAsyncConfig) {
            try {
                yield fcClient.deleteFunctionAsyncConfig(serviceName, functionName, qualifier);
            }
            catch (ex) {
                throw ex;
            }
        }
        try {
            yield fcClient.putFunctionAsyncConfig(serviceName, functionName, qualifier, asyncConfig);
        }
        catch (ex) {
            throw ex;
        }
    });
}
module.exports = {
    makeDestination
};
