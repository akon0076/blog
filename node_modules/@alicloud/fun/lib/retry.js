'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const getProfile = require('./profile').getProfile;
const retry = require('promise-retry');
function getRetryOptions() {
    return __awaiter(this, void 0, void 0, function* () {
        const profile = yield getProfile();
        const retryOptions = {
            retries: profile.retries,
            factor: 2,
            minTimeout: 1 * 1000,
            randomize: true
        };
        return retryOptions;
    });
}
function promiseRetry(fn) {
    return __awaiter(this, void 0, void 0, function* () {
        const retryOptions = yield getRetryOptions();
        return retry(fn, retryOptions);
    });
}
module.exports = promiseRetry;
