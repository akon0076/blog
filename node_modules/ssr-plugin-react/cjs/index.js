"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactPlugin = void 0;
const WebpackChain = require("webpack-chain");
function reactPlugin() {
    return {
        name: 'plugin-react',
        start: async () => {
            // 本地开发的时候要做细致的依赖分离， Vite 场景不需要去加载 Webpack 构建客户端应用所需的模块
            const { startServerBuild } = await Promise.resolve().then(() => require('ssr-webpack/cjs/server'));
            const { getServerWebpack } = await Promise.resolve().then(() => require('./config/server'));
            const serverConfigChain = new WebpackChain();
            if (process.env.BUILD_TOOL === 'vite') {
                await startServerBuild(getServerWebpack(serverConfigChain));
            }
            else {
                const { startClientServer } = await Promise.resolve().then(() => require('ssr-webpack'));
                const { getClientWebpack } = await Promise.resolve().then(() => require('./config'));
                const clientConfigChain = new WebpackChain();
                await Promise.all([startServerBuild(getServerWebpack(serverConfigChain)), startClientServer(getClientWebpack(clientConfigChain))]);
            }
        },
        build: async () => {
            const { startServerBuild, startClientBuild } = await Promise.resolve().then(() => require('ssr-webpack'));
            const { getClientWebpack, getServerWebpack } = await Promise.resolve().then(() => require('./config'));
            const serverConfigChain = new WebpackChain();
            const clientConfigChain = new WebpackChain();
            await Promise.all([startServerBuild(getServerWebpack(serverConfigChain)), startClientBuild(getClientWebpack(clientConfigChain))]);
        }
    };
}
exports.reactPlugin = reactPlugin;
