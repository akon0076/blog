"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerWebpack = void 0;
const path_1 = require("path");
const webpack = require("webpack");
const ssr_server_utils_1 = require("ssr-server-utils");
const base_1 = require("./base");
const loadModule = require.resolve;
const getServerWebpack = (chain) => {
    const config = ssr_server_utils_1.loadConfig();
    const { isDev, cwd, getOutput, chainServerConfig, whiteList, chunkName } = config;
    base_1.getBaseConfig(chain, true);
    chain.devtool(isDev ? 'eval-source-map' : false);
    chain.target('node');
    chain.entry(chunkName)
        .add(loadModule('../entry/server-entry'))
        .end()
        .output
        .path(getOutput().serverOutPut)
        .filename('[name].server.js')
        .libraryTarget('commonjs');
    const modulesDir = [path_1.join(cwd, './node_modules')];
    modulesDir.push(ssr_server_utils_1.getLocalNodeModules());
    chain.externals(ssr_server_utils_1.nodeExternals({
        whitelist: [/\.(css|less|sass|scss)$/, /ssr-temporary-routes/, /antd.*?(style)/].concat(whiteList || []),
        // externals Dir contains example/xxx/node_modules ssr/node_modules
        modulesDir
    }));
    chain.when(isDev, () => {
        chain.watch(true);
    });
    chain.plugin('define').use(webpack.DefinePlugin, [{
            __isBrowser__: false
        }]);
    chainServerConfig(chain); // 合并用户自定义配置
    return chain.toConfig();
};
exports.getServerWebpack = getServerWebpack;
