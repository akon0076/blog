import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { BrowserRouter, Route, Switch } from 'react-router-dom';
import { preloadComponent } from 'ssr-client-utils';
import { wrapComponent } from 'ssr-hoc-react';
// @ts-expect-error
import * as Routes from 'ssr-temporary-routes';
import { AppContext } from './context';
const { FeRoutes, layoutFetch, App, BASE_NAME } = Routes;
const clientRender = async () => {
    var _a, _b;
    const IApp = App !== null && App !== void 0 ? App : function (props) {
        return props.children;
    };
    // 客户端渲染||hydrate
    const routes = await preloadComponent(FeRoutes, BASE_NAME);
    ReactDOM[window.__USE_SSR__ ? 'hydrate' : 'render'](React.createElement(BrowserRouter, { basename: BASE_NAME },
        React.createElement(AppContext, null,
            React.createElement(IApp, null,
                React.createElement(Switch, null, 
                // 使用高阶组件wrapComponent使得csr首次进入页面以及csr/ssr切换路由时调用getInitialProps
                routes.map((item) => {
                    const { fetch, component, path } = item;
                    component.fetch = fetch;
                    component.layoutFetch = layoutFetch;
                    const WrappedComponent = wrapComponent(component);
                    return (React.createElement(Route, { exact: true, key: path, path: path, render: () => React.createElement(WrappedComponent, { key: location.pathname }) }));
                }))))), document.getElementById('app'));
    if (!window.__USE_VITE__) {
        (_b = (_a = module === null || module === void 0 ? void 0 : module.hot) === null || _a === void 0 ? void 0 : _a.accept) === null || _b === void 0 ? void 0 : _b.call(_a); // webpack 场景下的 hmr
    }
};
export default clientRender();
